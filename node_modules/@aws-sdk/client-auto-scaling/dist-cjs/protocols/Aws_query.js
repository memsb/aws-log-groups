"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeAws_queryPutScalingPolicyCommand = exports.serializeAws_queryPutNotificationConfigurationCommand = exports.serializeAws_queryPutLifecycleHookCommand = exports.serializeAws_queryGetPredictiveScalingForecastCommand = exports.serializeAws_queryExitStandbyCommand = exports.serializeAws_queryExecutePolicyCommand = exports.serializeAws_queryEnterStandbyCommand = exports.serializeAws_queryEnableMetricsCollectionCommand = exports.serializeAws_queryDisableMetricsCollectionCommand = exports.serializeAws_queryDetachLoadBalancerTargetGroupsCommand = exports.serializeAws_queryDetachLoadBalancersCommand = exports.serializeAws_queryDetachInstancesCommand = exports.serializeAws_queryDescribeWarmPoolCommand = exports.serializeAws_queryDescribeTerminationPolicyTypesCommand = exports.serializeAws_queryDescribeTagsCommand = exports.serializeAws_queryDescribeScheduledActionsCommand = exports.serializeAws_queryDescribeScalingProcessTypesCommand = exports.serializeAws_queryDescribeScalingActivitiesCommand = exports.serializeAws_queryDescribePoliciesCommand = exports.serializeAws_queryDescribeNotificationConfigurationsCommand = exports.serializeAws_queryDescribeMetricCollectionTypesCommand = exports.serializeAws_queryDescribeLoadBalancerTargetGroupsCommand = exports.serializeAws_queryDescribeLoadBalancersCommand = exports.serializeAws_queryDescribeLifecycleHookTypesCommand = exports.serializeAws_queryDescribeLifecycleHooksCommand = exports.serializeAws_queryDescribeLaunchConfigurationsCommand = exports.serializeAws_queryDescribeInstanceRefreshesCommand = exports.serializeAws_queryDescribeAutoScalingNotificationTypesCommand = exports.serializeAws_queryDescribeAutoScalingInstancesCommand = exports.serializeAws_queryDescribeAutoScalingGroupsCommand = exports.serializeAws_queryDescribeAdjustmentTypesCommand = exports.serializeAws_queryDescribeAccountLimitsCommand = exports.serializeAws_queryDeleteWarmPoolCommand = exports.serializeAws_queryDeleteTagsCommand = exports.serializeAws_queryDeleteScheduledActionCommand = exports.serializeAws_queryDeletePolicyCommand = exports.serializeAws_queryDeleteNotificationConfigurationCommand = exports.serializeAws_queryDeleteLifecycleHookCommand = exports.serializeAws_queryDeleteLaunchConfigurationCommand = exports.serializeAws_queryDeleteAutoScalingGroupCommand = exports.serializeAws_queryCreateOrUpdateTagsCommand = exports.serializeAws_queryCreateLaunchConfigurationCommand = exports.serializeAws_queryCreateAutoScalingGroupCommand = exports.serializeAws_queryCompleteLifecycleActionCommand = exports.serializeAws_queryCancelInstanceRefreshCommand = exports.serializeAws_queryBatchPutScheduledUpdateGroupActionCommand = exports.serializeAws_queryBatchDeleteScheduledActionCommand = exports.serializeAws_queryAttachLoadBalancerTargetGroupsCommand = exports.serializeAws_queryAttachLoadBalancersCommand = exports.serializeAws_queryAttachInstancesCommand = void 0;
exports.deserializeAws_queryDetachInstancesCommand = exports.deserializeAws_queryDescribeWarmPoolCommand = exports.deserializeAws_queryDescribeTerminationPolicyTypesCommand = exports.deserializeAws_queryDescribeTagsCommand = exports.deserializeAws_queryDescribeScheduledActionsCommand = exports.deserializeAws_queryDescribeScalingProcessTypesCommand = exports.deserializeAws_queryDescribeScalingActivitiesCommand = exports.deserializeAws_queryDescribePoliciesCommand = exports.deserializeAws_queryDescribeNotificationConfigurationsCommand = exports.deserializeAws_queryDescribeMetricCollectionTypesCommand = exports.deserializeAws_queryDescribeLoadBalancerTargetGroupsCommand = exports.deserializeAws_queryDescribeLoadBalancersCommand = exports.deserializeAws_queryDescribeLifecycleHookTypesCommand = exports.deserializeAws_queryDescribeLifecycleHooksCommand = exports.deserializeAws_queryDescribeLaunchConfigurationsCommand = exports.deserializeAws_queryDescribeInstanceRefreshesCommand = exports.deserializeAws_queryDescribeAutoScalingNotificationTypesCommand = exports.deserializeAws_queryDescribeAutoScalingInstancesCommand = exports.deserializeAws_queryDescribeAutoScalingGroupsCommand = exports.deserializeAws_queryDescribeAdjustmentTypesCommand = exports.deserializeAws_queryDescribeAccountLimitsCommand = exports.deserializeAws_queryDeleteWarmPoolCommand = exports.deserializeAws_queryDeleteTagsCommand = exports.deserializeAws_queryDeleteScheduledActionCommand = exports.deserializeAws_queryDeletePolicyCommand = exports.deserializeAws_queryDeleteNotificationConfigurationCommand = exports.deserializeAws_queryDeleteLifecycleHookCommand = exports.deserializeAws_queryDeleteLaunchConfigurationCommand = exports.deserializeAws_queryDeleteAutoScalingGroupCommand = exports.deserializeAws_queryCreateOrUpdateTagsCommand = exports.deserializeAws_queryCreateLaunchConfigurationCommand = exports.deserializeAws_queryCreateAutoScalingGroupCommand = exports.deserializeAws_queryCompleteLifecycleActionCommand = exports.deserializeAws_queryCancelInstanceRefreshCommand = exports.deserializeAws_queryBatchPutScheduledUpdateGroupActionCommand = exports.deserializeAws_queryBatchDeleteScheduledActionCommand = exports.deserializeAws_queryAttachLoadBalancerTargetGroupsCommand = exports.deserializeAws_queryAttachLoadBalancersCommand = exports.deserializeAws_queryAttachInstancesCommand = exports.serializeAws_queryUpdateAutoScalingGroupCommand = exports.serializeAws_queryTerminateInstanceInAutoScalingGroupCommand = exports.serializeAws_querySuspendProcessesCommand = exports.serializeAws_queryStartInstanceRefreshCommand = exports.serializeAws_querySetInstanceProtectionCommand = exports.serializeAws_querySetInstanceHealthCommand = exports.serializeAws_querySetDesiredCapacityCommand = exports.serializeAws_queryResumeProcessesCommand = exports.serializeAws_queryRecordLifecycleActionHeartbeatCommand = exports.serializeAws_queryPutWarmPoolCommand = exports.serializeAws_queryPutScheduledUpdateGroupActionCommand = void 0;
exports.deserializeAws_queryUpdateAutoScalingGroupCommand = exports.deserializeAws_queryTerminateInstanceInAutoScalingGroupCommand = exports.deserializeAws_querySuspendProcessesCommand = exports.deserializeAws_queryStartInstanceRefreshCommand = exports.deserializeAws_querySetInstanceProtectionCommand = exports.deserializeAws_querySetInstanceHealthCommand = exports.deserializeAws_querySetDesiredCapacityCommand = exports.deserializeAws_queryResumeProcessesCommand = exports.deserializeAws_queryRecordLifecycleActionHeartbeatCommand = exports.deserializeAws_queryPutWarmPoolCommand = exports.deserializeAws_queryPutScheduledUpdateGroupActionCommand = exports.deserializeAws_queryPutScalingPolicyCommand = exports.deserializeAws_queryPutNotificationConfigurationCommand = exports.deserializeAws_queryPutLifecycleHookCommand = exports.deserializeAws_queryGetPredictiveScalingForecastCommand = exports.deserializeAws_queryExitStandbyCommand = exports.deserializeAws_queryExecutePolicyCommand = exports.deserializeAws_queryEnterStandbyCommand = exports.deserializeAws_queryEnableMetricsCollectionCommand = exports.deserializeAws_queryDisableMetricsCollectionCommand = exports.deserializeAws_queryDetachLoadBalancerTargetGroupsCommand = exports.deserializeAws_queryDetachLoadBalancersCommand = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const smithy_client_1 = require("@aws-sdk/smithy-client");
const fast_xml_parser_1 = require("fast-xml-parser");
const AutoScalingServiceException_1 = require("../models/AutoScalingServiceException");
const models_0_1 = require("../models/models_0");
const serializeAws_queryAttachInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryAttachInstancesQuery(input, context),
        Action: "AttachInstances",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryAttachInstancesCommand = serializeAws_queryAttachInstancesCommand;
const serializeAws_queryAttachLoadBalancersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryAttachLoadBalancersType(input, context),
        Action: "AttachLoadBalancers",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryAttachLoadBalancersCommand = serializeAws_queryAttachLoadBalancersCommand;
const serializeAws_queryAttachLoadBalancerTargetGroupsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryAttachLoadBalancerTargetGroupsType(input, context),
        Action: "AttachLoadBalancerTargetGroups",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryAttachLoadBalancerTargetGroupsCommand = serializeAws_queryAttachLoadBalancerTargetGroupsCommand;
const serializeAws_queryBatchDeleteScheduledActionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryBatchDeleteScheduledActionType(input, context),
        Action: "BatchDeleteScheduledAction",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryBatchDeleteScheduledActionCommand = serializeAws_queryBatchDeleteScheduledActionCommand;
const serializeAws_queryBatchPutScheduledUpdateGroupActionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryBatchPutScheduledUpdateGroupActionType(input, context),
        Action: "BatchPutScheduledUpdateGroupAction",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryBatchPutScheduledUpdateGroupActionCommand = serializeAws_queryBatchPutScheduledUpdateGroupActionCommand;
const serializeAws_queryCancelInstanceRefreshCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCancelInstanceRefreshType(input, context),
        Action: "CancelInstanceRefresh",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCancelInstanceRefreshCommand = serializeAws_queryCancelInstanceRefreshCommand;
const serializeAws_queryCompleteLifecycleActionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCompleteLifecycleActionType(input, context),
        Action: "CompleteLifecycleAction",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCompleteLifecycleActionCommand = serializeAws_queryCompleteLifecycleActionCommand;
const serializeAws_queryCreateAutoScalingGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateAutoScalingGroupType(input, context),
        Action: "CreateAutoScalingGroup",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCreateAutoScalingGroupCommand = serializeAws_queryCreateAutoScalingGroupCommand;
const serializeAws_queryCreateLaunchConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateLaunchConfigurationType(input, context),
        Action: "CreateLaunchConfiguration",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCreateLaunchConfigurationCommand = serializeAws_queryCreateLaunchConfigurationCommand;
const serializeAws_queryCreateOrUpdateTagsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateOrUpdateTagsType(input, context),
        Action: "CreateOrUpdateTags",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCreateOrUpdateTagsCommand = serializeAws_queryCreateOrUpdateTagsCommand;
const serializeAws_queryDeleteAutoScalingGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteAutoScalingGroupType(input, context),
        Action: "DeleteAutoScalingGroup",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeleteAutoScalingGroupCommand = serializeAws_queryDeleteAutoScalingGroupCommand;
const serializeAws_queryDeleteLaunchConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryLaunchConfigurationNameType(input, context),
        Action: "DeleteLaunchConfiguration",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeleteLaunchConfigurationCommand = serializeAws_queryDeleteLaunchConfigurationCommand;
const serializeAws_queryDeleteLifecycleHookCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteLifecycleHookType(input, context),
        Action: "DeleteLifecycleHook",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeleteLifecycleHookCommand = serializeAws_queryDeleteLifecycleHookCommand;
const serializeAws_queryDeleteNotificationConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteNotificationConfigurationType(input, context),
        Action: "DeleteNotificationConfiguration",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeleteNotificationConfigurationCommand = serializeAws_queryDeleteNotificationConfigurationCommand;
const serializeAws_queryDeletePolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeletePolicyType(input, context),
        Action: "DeletePolicy",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeletePolicyCommand = serializeAws_queryDeletePolicyCommand;
const serializeAws_queryDeleteScheduledActionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteScheduledActionType(input, context),
        Action: "DeleteScheduledAction",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeleteScheduledActionCommand = serializeAws_queryDeleteScheduledActionCommand;
const serializeAws_queryDeleteTagsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteTagsType(input, context),
        Action: "DeleteTags",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeleteTagsCommand = serializeAws_queryDeleteTagsCommand;
const serializeAws_queryDeleteWarmPoolCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteWarmPoolType(input, context),
        Action: "DeleteWarmPool",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeleteWarmPoolCommand = serializeAws_queryDeleteWarmPoolCommand;
const serializeAws_queryDescribeAccountLimitsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    const body = buildFormUrlencodedString({
        Action: "DescribeAccountLimits",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeAccountLimitsCommand = serializeAws_queryDescribeAccountLimitsCommand;
const serializeAws_queryDescribeAdjustmentTypesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    const body = buildFormUrlencodedString({
        Action: "DescribeAdjustmentTypes",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeAdjustmentTypesCommand = serializeAws_queryDescribeAdjustmentTypesCommand;
const serializeAws_queryDescribeAutoScalingGroupsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryAutoScalingGroupNamesType(input, context),
        Action: "DescribeAutoScalingGroups",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeAutoScalingGroupsCommand = serializeAws_queryDescribeAutoScalingGroupsCommand;
const serializeAws_queryDescribeAutoScalingInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeAutoScalingInstancesType(input, context),
        Action: "DescribeAutoScalingInstances",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeAutoScalingInstancesCommand = serializeAws_queryDescribeAutoScalingInstancesCommand;
const serializeAws_queryDescribeAutoScalingNotificationTypesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    const body = buildFormUrlencodedString({
        Action: "DescribeAutoScalingNotificationTypes",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeAutoScalingNotificationTypesCommand = serializeAws_queryDescribeAutoScalingNotificationTypesCommand;
const serializeAws_queryDescribeInstanceRefreshesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeInstanceRefreshesType(input, context),
        Action: "DescribeInstanceRefreshes",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeInstanceRefreshesCommand = serializeAws_queryDescribeInstanceRefreshesCommand;
const serializeAws_queryDescribeLaunchConfigurationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryLaunchConfigurationNamesType(input, context),
        Action: "DescribeLaunchConfigurations",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeLaunchConfigurationsCommand = serializeAws_queryDescribeLaunchConfigurationsCommand;
const serializeAws_queryDescribeLifecycleHooksCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeLifecycleHooksType(input, context),
        Action: "DescribeLifecycleHooks",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeLifecycleHooksCommand = serializeAws_queryDescribeLifecycleHooksCommand;
const serializeAws_queryDescribeLifecycleHookTypesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    const body = buildFormUrlencodedString({
        Action: "DescribeLifecycleHookTypes",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeLifecycleHookTypesCommand = serializeAws_queryDescribeLifecycleHookTypesCommand;
const serializeAws_queryDescribeLoadBalancersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeLoadBalancersRequest(input, context),
        Action: "DescribeLoadBalancers",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeLoadBalancersCommand = serializeAws_queryDescribeLoadBalancersCommand;
const serializeAws_queryDescribeLoadBalancerTargetGroupsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeLoadBalancerTargetGroupsRequest(input, context),
        Action: "DescribeLoadBalancerTargetGroups",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeLoadBalancerTargetGroupsCommand = serializeAws_queryDescribeLoadBalancerTargetGroupsCommand;
const serializeAws_queryDescribeMetricCollectionTypesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    const body = buildFormUrlencodedString({
        Action: "DescribeMetricCollectionTypes",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeMetricCollectionTypesCommand = serializeAws_queryDescribeMetricCollectionTypesCommand;
const serializeAws_queryDescribeNotificationConfigurationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeNotificationConfigurationsType(input, context),
        Action: "DescribeNotificationConfigurations",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeNotificationConfigurationsCommand = serializeAws_queryDescribeNotificationConfigurationsCommand;
const serializeAws_queryDescribePoliciesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribePoliciesType(input, context),
        Action: "DescribePolicies",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribePoliciesCommand = serializeAws_queryDescribePoliciesCommand;
const serializeAws_queryDescribeScalingActivitiesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeScalingActivitiesType(input, context),
        Action: "DescribeScalingActivities",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeScalingActivitiesCommand = serializeAws_queryDescribeScalingActivitiesCommand;
const serializeAws_queryDescribeScalingProcessTypesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    const body = buildFormUrlencodedString({
        Action: "DescribeScalingProcessTypes",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeScalingProcessTypesCommand = serializeAws_queryDescribeScalingProcessTypesCommand;
const serializeAws_queryDescribeScheduledActionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeScheduledActionsType(input, context),
        Action: "DescribeScheduledActions",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeScheduledActionsCommand = serializeAws_queryDescribeScheduledActionsCommand;
const serializeAws_queryDescribeTagsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeTagsType(input, context),
        Action: "DescribeTags",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeTagsCommand = serializeAws_queryDescribeTagsCommand;
const serializeAws_queryDescribeTerminationPolicyTypesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    const body = buildFormUrlencodedString({
        Action: "DescribeTerminationPolicyTypes",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeTerminationPolicyTypesCommand = serializeAws_queryDescribeTerminationPolicyTypesCommand;
const serializeAws_queryDescribeWarmPoolCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeWarmPoolType(input, context),
        Action: "DescribeWarmPool",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeWarmPoolCommand = serializeAws_queryDescribeWarmPoolCommand;
const serializeAws_queryDetachInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDetachInstancesQuery(input, context),
        Action: "DetachInstances",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDetachInstancesCommand = serializeAws_queryDetachInstancesCommand;
const serializeAws_queryDetachLoadBalancersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDetachLoadBalancersType(input, context),
        Action: "DetachLoadBalancers",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDetachLoadBalancersCommand = serializeAws_queryDetachLoadBalancersCommand;
const serializeAws_queryDetachLoadBalancerTargetGroupsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDetachLoadBalancerTargetGroupsType(input, context),
        Action: "DetachLoadBalancerTargetGroups",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDetachLoadBalancerTargetGroupsCommand = serializeAws_queryDetachLoadBalancerTargetGroupsCommand;
const serializeAws_queryDisableMetricsCollectionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDisableMetricsCollectionQuery(input, context),
        Action: "DisableMetricsCollection",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDisableMetricsCollectionCommand = serializeAws_queryDisableMetricsCollectionCommand;
const serializeAws_queryEnableMetricsCollectionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryEnableMetricsCollectionQuery(input, context),
        Action: "EnableMetricsCollection",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryEnableMetricsCollectionCommand = serializeAws_queryEnableMetricsCollectionCommand;
const serializeAws_queryEnterStandbyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryEnterStandbyQuery(input, context),
        Action: "EnterStandby",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryEnterStandbyCommand = serializeAws_queryEnterStandbyCommand;
const serializeAws_queryExecutePolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryExecutePolicyType(input, context),
        Action: "ExecutePolicy",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryExecutePolicyCommand = serializeAws_queryExecutePolicyCommand;
const serializeAws_queryExitStandbyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryExitStandbyQuery(input, context),
        Action: "ExitStandby",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryExitStandbyCommand = serializeAws_queryExitStandbyCommand;
const serializeAws_queryGetPredictiveScalingForecastCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryGetPredictiveScalingForecastType(input, context),
        Action: "GetPredictiveScalingForecast",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryGetPredictiveScalingForecastCommand = serializeAws_queryGetPredictiveScalingForecastCommand;
const serializeAws_queryPutLifecycleHookCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryPutLifecycleHookType(input, context),
        Action: "PutLifecycleHook",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryPutLifecycleHookCommand = serializeAws_queryPutLifecycleHookCommand;
const serializeAws_queryPutNotificationConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryPutNotificationConfigurationType(input, context),
        Action: "PutNotificationConfiguration",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryPutNotificationConfigurationCommand = serializeAws_queryPutNotificationConfigurationCommand;
const serializeAws_queryPutScalingPolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryPutScalingPolicyType(input, context),
        Action: "PutScalingPolicy",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryPutScalingPolicyCommand = serializeAws_queryPutScalingPolicyCommand;
const serializeAws_queryPutScheduledUpdateGroupActionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryPutScheduledUpdateGroupActionType(input, context),
        Action: "PutScheduledUpdateGroupAction",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryPutScheduledUpdateGroupActionCommand = serializeAws_queryPutScheduledUpdateGroupActionCommand;
const serializeAws_queryPutWarmPoolCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryPutWarmPoolType(input, context),
        Action: "PutWarmPool",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryPutWarmPoolCommand = serializeAws_queryPutWarmPoolCommand;
const serializeAws_queryRecordLifecycleActionHeartbeatCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRecordLifecycleActionHeartbeatType(input, context),
        Action: "RecordLifecycleActionHeartbeat",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryRecordLifecycleActionHeartbeatCommand = serializeAws_queryRecordLifecycleActionHeartbeatCommand;
const serializeAws_queryResumeProcessesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryScalingProcessQuery(input, context),
        Action: "ResumeProcesses",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryResumeProcessesCommand = serializeAws_queryResumeProcessesCommand;
const serializeAws_querySetDesiredCapacityCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_querySetDesiredCapacityType(input, context),
        Action: "SetDesiredCapacity",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_querySetDesiredCapacityCommand = serializeAws_querySetDesiredCapacityCommand;
const serializeAws_querySetInstanceHealthCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_querySetInstanceHealthQuery(input, context),
        Action: "SetInstanceHealth",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_querySetInstanceHealthCommand = serializeAws_querySetInstanceHealthCommand;
const serializeAws_querySetInstanceProtectionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_querySetInstanceProtectionQuery(input, context),
        Action: "SetInstanceProtection",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_querySetInstanceProtectionCommand = serializeAws_querySetInstanceProtectionCommand;
const serializeAws_queryStartInstanceRefreshCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryStartInstanceRefreshType(input, context),
        Action: "StartInstanceRefresh",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryStartInstanceRefreshCommand = serializeAws_queryStartInstanceRefreshCommand;
const serializeAws_querySuspendProcessesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryScalingProcessQuery(input, context),
        Action: "SuspendProcesses",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_querySuspendProcessesCommand = serializeAws_querySuspendProcessesCommand;
const serializeAws_queryTerminateInstanceInAutoScalingGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryTerminateInstanceInAutoScalingGroupType(input, context),
        Action: "TerminateInstanceInAutoScalingGroup",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryTerminateInstanceInAutoScalingGroupCommand = serializeAws_queryTerminateInstanceInAutoScalingGroupCommand;
const serializeAws_queryUpdateAutoScalingGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateAutoScalingGroupType(input, context),
        Action: "UpdateAutoScalingGroup",
        Version: "2011-01-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryUpdateAutoScalingGroupCommand = serializeAws_queryUpdateAutoScalingGroupCommand;
const deserializeAws_queryAttachInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryAttachInstancesCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryAttachInstancesCommand = deserializeAws_queryAttachInstancesCommand;
const deserializeAws_queryAttachInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        case "ServiceLinkedRoleFailure":
        case "com.amazonaws.autoscaling#ServiceLinkedRoleFailure":
            throw await deserializeAws_queryServiceLinkedRoleFailureResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryAttachLoadBalancersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryAttachLoadBalancersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryAttachLoadBalancersResultType(data.AttachLoadBalancersResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryAttachLoadBalancersCommand = deserializeAws_queryAttachLoadBalancersCommand;
const deserializeAws_queryAttachLoadBalancersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        case "ServiceLinkedRoleFailure":
        case "com.amazonaws.autoscaling#ServiceLinkedRoleFailure":
            throw await deserializeAws_queryServiceLinkedRoleFailureResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryAttachLoadBalancerTargetGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryAttachLoadBalancerTargetGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryAttachLoadBalancerTargetGroupsResultType(data.AttachLoadBalancerTargetGroupsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryAttachLoadBalancerTargetGroupsCommand = deserializeAws_queryAttachLoadBalancerTargetGroupsCommand;
const deserializeAws_queryAttachLoadBalancerTargetGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        case "ServiceLinkedRoleFailure":
        case "com.amazonaws.autoscaling#ServiceLinkedRoleFailure":
            throw await deserializeAws_queryServiceLinkedRoleFailureResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryBatchDeleteScheduledActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryBatchDeleteScheduledActionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryBatchDeleteScheduledActionAnswer(data.BatchDeleteScheduledActionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryBatchDeleteScheduledActionCommand = deserializeAws_queryBatchDeleteScheduledActionCommand;
const deserializeAws_queryBatchDeleteScheduledActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryBatchPutScheduledUpdateGroupActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryBatchPutScheduledUpdateGroupActionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryBatchPutScheduledUpdateGroupActionAnswer(data.BatchPutScheduledUpdateGroupActionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryBatchPutScheduledUpdateGroupActionCommand = deserializeAws_queryBatchPutScheduledUpdateGroupActionCommand;
const deserializeAws_queryBatchPutScheduledUpdateGroupActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExists":
        case "com.amazonaws.autoscaling#AlreadyExistsFault":
            throw await deserializeAws_queryAlreadyExistsFaultResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.autoscaling#LimitExceededFault":
            throw await deserializeAws_queryLimitExceededFaultResponse(parsedOutput, context);
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCancelInstanceRefreshCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCancelInstanceRefreshCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCancelInstanceRefreshAnswer(data.CancelInstanceRefreshResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCancelInstanceRefreshCommand = deserializeAws_queryCancelInstanceRefreshCommand;
const deserializeAws_queryCancelInstanceRefreshCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ActiveInstanceRefreshNotFound":
        case "com.amazonaws.autoscaling#ActiveInstanceRefreshNotFoundFault":
            throw await deserializeAws_queryActiveInstanceRefreshNotFoundFaultResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.autoscaling#LimitExceededFault":
            throw await deserializeAws_queryLimitExceededFaultResponse(parsedOutput, context);
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCompleteLifecycleActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCompleteLifecycleActionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCompleteLifecycleActionAnswer(data.CompleteLifecycleActionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCompleteLifecycleActionCommand = deserializeAws_queryCompleteLifecycleActionCommand;
const deserializeAws_queryCompleteLifecycleActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCreateAutoScalingGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateAutoScalingGroupCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCreateAutoScalingGroupCommand = deserializeAws_queryCreateAutoScalingGroupCommand;
const deserializeAws_queryCreateAutoScalingGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExists":
        case "com.amazonaws.autoscaling#AlreadyExistsFault":
            throw await deserializeAws_queryAlreadyExistsFaultResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.autoscaling#LimitExceededFault":
            throw await deserializeAws_queryLimitExceededFaultResponse(parsedOutput, context);
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        case "ServiceLinkedRoleFailure":
        case "com.amazonaws.autoscaling#ServiceLinkedRoleFailure":
            throw await deserializeAws_queryServiceLinkedRoleFailureResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCreateLaunchConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateLaunchConfigurationCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCreateLaunchConfigurationCommand = deserializeAws_queryCreateLaunchConfigurationCommand;
const deserializeAws_queryCreateLaunchConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExists":
        case "com.amazonaws.autoscaling#AlreadyExistsFault":
            throw await deserializeAws_queryAlreadyExistsFaultResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.autoscaling#LimitExceededFault":
            throw await deserializeAws_queryLimitExceededFaultResponse(parsedOutput, context);
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCreateOrUpdateTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateOrUpdateTagsCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCreateOrUpdateTagsCommand = deserializeAws_queryCreateOrUpdateTagsCommand;
const deserializeAws_queryCreateOrUpdateTagsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExists":
        case "com.amazonaws.autoscaling#AlreadyExistsFault":
            throw await deserializeAws_queryAlreadyExistsFaultResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.autoscaling#LimitExceededFault":
            throw await deserializeAws_queryLimitExceededFaultResponse(parsedOutput, context);
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        case "ResourceInUse":
        case "com.amazonaws.autoscaling#ResourceInUseFault":
            throw await deserializeAws_queryResourceInUseFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeleteAutoScalingGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteAutoScalingGroupCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeleteAutoScalingGroupCommand = deserializeAws_queryDeleteAutoScalingGroupCommand;
const deserializeAws_queryDeleteAutoScalingGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        case "ResourceInUse":
        case "com.amazonaws.autoscaling#ResourceInUseFault":
            throw await deserializeAws_queryResourceInUseFaultResponse(parsedOutput, context);
        case "ScalingActivityInProgress":
        case "com.amazonaws.autoscaling#ScalingActivityInProgressFault":
            throw await deserializeAws_queryScalingActivityInProgressFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeleteLaunchConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteLaunchConfigurationCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeleteLaunchConfigurationCommand = deserializeAws_queryDeleteLaunchConfigurationCommand;
const deserializeAws_queryDeleteLaunchConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        case "ResourceInUse":
        case "com.amazonaws.autoscaling#ResourceInUseFault":
            throw await deserializeAws_queryResourceInUseFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeleteLifecycleHookCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteLifecycleHookCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeleteLifecycleHookAnswer(data.DeleteLifecycleHookResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeleteLifecycleHookCommand = deserializeAws_queryDeleteLifecycleHookCommand;
const deserializeAws_queryDeleteLifecycleHookCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeleteNotificationConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteNotificationConfigurationCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeleteNotificationConfigurationCommand = deserializeAws_queryDeleteNotificationConfigurationCommand;
const deserializeAws_queryDeleteNotificationConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeletePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeletePolicyCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeletePolicyCommand = deserializeAws_queryDeletePolicyCommand;
const deserializeAws_queryDeletePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        case "ServiceLinkedRoleFailure":
        case "com.amazonaws.autoscaling#ServiceLinkedRoleFailure":
            throw await deserializeAws_queryServiceLinkedRoleFailureResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeleteScheduledActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteScheduledActionCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeleteScheduledActionCommand = deserializeAws_queryDeleteScheduledActionCommand;
const deserializeAws_queryDeleteScheduledActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeleteTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteTagsCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeleteTagsCommand = deserializeAws_queryDeleteTagsCommand;
const deserializeAws_queryDeleteTagsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        case "ResourceInUse":
        case "com.amazonaws.autoscaling#ResourceInUseFault":
            throw await deserializeAws_queryResourceInUseFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeleteWarmPoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteWarmPoolCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeleteWarmPoolAnswer(data.DeleteWarmPoolResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeleteWarmPoolCommand = deserializeAws_queryDeleteWarmPoolCommand;
const deserializeAws_queryDeleteWarmPoolCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "LimitExceeded":
        case "com.amazonaws.autoscaling#LimitExceededFault":
            throw await deserializeAws_queryLimitExceededFaultResponse(parsedOutput, context);
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        case "ResourceInUse":
        case "com.amazonaws.autoscaling#ResourceInUseFault":
            throw await deserializeAws_queryResourceInUseFaultResponse(parsedOutput, context);
        case "ScalingActivityInProgress":
        case "com.amazonaws.autoscaling#ScalingActivityInProgressFault":
            throw await deserializeAws_queryScalingActivityInProgressFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeAccountLimitsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeAccountLimitsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeAccountLimitsAnswer(data.DescribeAccountLimitsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeAccountLimitsCommand = deserializeAws_queryDescribeAccountLimitsCommand;
const deserializeAws_queryDescribeAccountLimitsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeAdjustmentTypesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeAdjustmentTypesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeAdjustmentTypesAnswer(data.DescribeAdjustmentTypesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeAdjustmentTypesCommand = deserializeAws_queryDescribeAdjustmentTypesCommand;
const deserializeAws_queryDescribeAdjustmentTypesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeAutoScalingGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeAutoScalingGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryAutoScalingGroupsType(data.DescribeAutoScalingGroupsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeAutoScalingGroupsCommand = deserializeAws_queryDescribeAutoScalingGroupsCommand;
const deserializeAws_queryDescribeAutoScalingGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextToken":
        case "com.amazonaws.autoscaling#InvalidNextToken":
            throw await deserializeAws_queryInvalidNextTokenResponse(parsedOutput, context);
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeAutoScalingInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeAutoScalingInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryAutoScalingInstancesType(data.DescribeAutoScalingInstancesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeAutoScalingInstancesCommand = deserializeAws_queryDescribeAutoScalingInstancesCommand;
const deserializeAws_queryDescribeAutoScalingInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextToken":
        case "com.amazonaws.autoscaling#InvalidNextToken":
            throw await deserializeAws_queryInvalidNextTokenResponse(parsedOutput, context);
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeAutoScalingNotificationTypesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeAutoScalingNotificationTypesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeAutoScalingNotificationTypesAnswer(data.DescribeAutoScalingNotificationTypesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeAutoScalingNotificationTypesCommand = deserializeAws_queryDescribeAutoScalingNotificationTypesCommand;
const deserializeAws_queryDescribeAutoScalingNotificationTypesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeInstanceRefreshesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeInstanceRefreshesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeInstanceRefreshesAnswer(data.DescribeInstanceRefreshesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeInstanceRefreshesCommand = deserializeAws_queryDescribeInstanceRefreshesCommand;
const deserializeAws_queryDescribeInstanceRefreshesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextToken":
        case "com.amazonaws.autoscaling#InvalidNextToken":
            throw await deserializeAws_queryInvalidNextTokenResponse(parsedOutput, context);
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeLaunchConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeLaunchConfigurationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryLaunchConfigurationsType(data.DescribeLaunchConfigurationsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeLaunchConfigurationsCommand = deserializeAws_queryDescribeLaunchConfigurationsCommand;
const deserializeAws_queryDescribeLaunchConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextToken":
        case "com.amazonaws.autoscaling#InvalidNextToken":
            throw await deserializeAws_queryInvalidNextTokenResponse(parsedOutput, context);
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeLifecycleHooksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeLifecycleHooksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeLifecycleHooksAnswer(data.DescribeLifecycleHooksResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeLifecycleHooksCommand = deserializeAws_queryDescribeLifecycleHooksCommand;
const deserializeAws_queryDescribeLifecycleHooksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeLifecycleHookTypesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeLifecycleHookTypesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeLifecycleHookTypesAnswer(data.DescribeLifecycleHookTypesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeLifecycleHookTypesCommand = deserializeAws_queryDescribeLifecycleHookTypesCommand;
const deserializeAws_queryDescribeLifecycleHookTypesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeLoadBalancersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeLoadBalancersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeLoadBalancersResponse(data.DescribeLoadBalancersResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeLoadBalancersCommand = deserializeAws_queryDescribeLoadBalancersCommand;
const deserializeAws_queryDescribeLoadBalancersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextToken":
        case "com.amazonaws.autoscaling#InvalidNextToken":
            throw await deserializeAws_queryInvalidNextTokenResponse(parsedOutput, context);
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeLoadBalancerTargetGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeLoadBalancerTargetGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeLoadBalancerTargetGroupsResponse(data.DescribeLoadBalancerTargetGroupsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeLoadBalancerTargetGroupsCommand = deserializeAws_queryDescribeLoadBalancerTargetGroupsCommand;
const deserializeAws_queryDescribeLoadBalancerTargetGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextToken":
        case "com.amazonaws.autoscaling#InvalidNextToken":
            throw await deserializeAws_queryInvalidNextTokenResponse(parsedOutput, context);
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeMetricCollectionTypesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeMetricCollectionTypesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeMetricCollectionTypesAnswer(data.DescribeMetricCollectionTypesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeMetricCollectionTypesCommand = deserializeAws_queryDescribeMetricCollectionTypesCommand;
const deserializeAws_queryDescribeMetricCollectionTypesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeNotificationConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeNotificationConfigurationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeNotificationConfigurationsAnswer(data.DescribeNotificationConfigurationsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeNotificationConfigurationsCommand = deserializeAws_queryDescribeNotificationConfigurationsCommand;
const deserializeAws_queryDescribeNotificationConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextToken":
        case "com.amazonaws.autoscaling#InvalidNextToken":
            throw await deserializeAws_queryInvalidNextTokenResponse(parsedOutput, context);
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribePoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribePoliciesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryPoliciesType(data.DescribePoliciesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribePoliciesCommand = deserializeAws_queryDescribePoliciesCommand;
const deserializeAws_queryDescribePoliciesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextToken":
        case "com.amazonaws.autoscaling#InvalidNextToken":
            throw await deserializeAws_queryInvalidNextTokenResponse(parsedOutput, context);
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        case "ServiceLinkedRoleFailure":
        case "com.amazonaws.autoscaling#ServiceLinkedRoleFailure":
            throw await deserializeAws_queryServiceLinkedRoleFailureResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeScalingActivitiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeScalingActivitiesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryActivitiesType(data.DescribeScalingActivitiesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeScalingActivitiesCommand = deserializeAws_queryDescribeScalingActivitiesCommand;
const deserializeAws_queryDescribeScalingActivitiesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextToken":
        case "com.amazonaws.autoscaling#InvalidNextToken":
            throw await deserializeAws_queryInvalidNextTokenResponse(parsedOutput, context);
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeScalingProcessTypesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeScalingProcessTypesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryProcessesType(data.DescribeScalingProcessTypesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeScalingProcessTypesCommand = deserializeAws_queryDescribeScalingProcessTypesCommand;
const deserializeAws_queryDescribeScalingProcessTypesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeScheduledActionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeScheduledActionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryScheduledActionsType(data.DescribeScheduledActionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeScheduledActionsCommand = deserializeAws_queryDescribeScheduledActionsCommand;
const deserializeAws_queryDescribeScheduledActionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextToken":
        case "com.amazonaws.autoscaling#InvalidNextToken":
            throw await deserializeAws_queryInvalidNextTokenResponse(parsedOutput, context);
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeTagsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryTagsType(data.DescribeTagsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeTagsCommand = deserializeAws_queryDescribeTagsCommand;
const deserializeAws_queryDescribeTagsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextToken":
        case "com.amazonaws.autoscaling#InvalidNextToken":
            throw await deserializeAws_queryInvalidNextTokenResponse(parsedOutput, context);
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeTerminationPolicyTypesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeTerminationPolicyTypesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeTerminationPolicyTypesAnswer(data.DescribeTerminationPolicyTypesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeTerminationPolicyTypesCommand = deserializeAws_queryDescribeTerminationPolicyTypesCommand;
const deserializeAws_queryDescribeTerminationPolicyTypesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeWarmPoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeWarmPoolCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeWarmPoolAnswer(data.DescribeWarmPoolResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeWarmPoolCommand = deserializeAws_queryDescribeWarmPoolCommand;
const deserializeAws_queryDescribeWarmPoolCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextToken":
        case "com.amazonaws.autoscaling#InvalidNextToken":
            throw await deserializeAws_queryInvalidNextTokenResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.autoscaling#LimitExceededFault":
            throw await deserializeAws_queryLimitExceededFaultResponse(parsedOutput, context);
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDetachInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDetachInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDetachInstancesAnswer(data.DetachInstancesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDetachInstancesCommand = deserializeAws_queryDetachInstancesCommand;
const deserializeAws_queryDetachInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDetachLoadBalancersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDetachLoadBalancersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDetachLoadBalancersResultType(data.DetachLoadBalancersResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDetachLoadBalancersCommand = deserializeAws_queryDetachLoadBalancersCommand;
const deserializeAws_queryDetachLoadBalancersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDetachLoadBalancerTargetGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDetachLoadBalancerTargetGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDetachLoadBalancerTargetGroupsResultType(data.DetachLoadBalancerTargetGroupsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDetachLoadBalancerTargetGroupsCommand = deserializeAws_queryDetachLoadBalancerTargetGroupsCommand;
const deserializeAws_queryDetachLoadBalancerTargetGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDisableMetricsCollectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDisableMetricsCollectionCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDisableMetricsCollectionCommand = deserializeAws_queryDisableMetricsCollectionCommand;
const deserializeAws_queryDisableMetricsCollectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryEnableMetricsCollectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryEnableMetricsCollectionCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryEnableMetricsCollectionCommand = deserializeAws_queryEnableMetricsCollectionCommand;
const deserializeAws_queryEnableMetricsCollectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryEnterStandbyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryEnterStandbyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryEnterStandbyAnswer(data.EnterStandbyResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryEnterStandbyCommand = deserializeAws_queryEnterStandbyCommand;
const deserializeAws_queryEnterStandbyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryExecutePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryExecutePolicyCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryExecutePolicyCommand = deserializeAws_queryExecutePolicyCommand;
const deserializeAws_queryExecutePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        case "ScalingActivityInProgress":
        case "com.amazonaws.autoscaling#ScalingActivityInProgressFault":
            throw await deserializeAws_queryScalingActivityInProgressFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryExitStandbyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryExitStandbyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryExitStandbyAnswer(data.ExitStandbyResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryExitStandbyCommand = deserializeAws_queryExitStandbyCommand;
const deserializeAws_queryExitStandbyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryGetPredictiveScalingForecastCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryGetPredictiveScalingForecastCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryGetPredictiveScalingForecastAnswer(data.GetPredictiveScalingForecastResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryGetPredictiveScalingForecastCommand = deserializeAws_queryGetPredictiveScalingForecastCommand;
const deserializeAws_queryGetPredictiveScalingForecastCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryPutLifecycleHookCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryPutLifecycleHookCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryPutLifecycleHookAnswer(data.PutLifecycleHookResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryPutLifecycleHookCommand = deserializeAws_queryPutLifecycleHookCommand;
const deserializeAws_queryPutLifecycleHookCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "LimitExceeded":
        case "com.amazonaws.autoscaling#LimitExceededFault":
            throw await deserializeAws_queryLimitExceededFaultResponse(parsedOutput, context);
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryPutNotificationConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryPutNotificationConfigurationCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryPutNotificationConfigurationCommand = deserializeAws_queryPutNotificationConfigurationCommand;
const deserializeAws_queryPutNotificationConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "LimitExceeded":
        case "com.amazonaws.autoscaling#LimitExceededFault":
            throw await deserializeAws_queryLimitExceededFaultResponse(parsedOutput, context);
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        case "ServiceLinkedRoleFailure":
        case "com.amazonaws.autoscaling#ServiceLinkedRoleFailure":
            throw await deserializeAws_queryServiceLinkedRoleFailureResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryPutScalingPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryPutScalingPolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryPolicyARNType(data.PutScalingPolicyResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryPutScalingPolicyCommand = deserializeAws_queryPutScalingPolicyCommand;
const deserializeAws_queryPutScalingPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "LimitExceeded":
        case "com.amazonaws.autoscaling#LimitExceededFault":
            throw await deserializeAws_queryLimitExceededFaultResponse(parsedOutput, context);
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        case "ServiceLinkedRoleFailure":
        case "com.amazonaws.autoscaling#ServiceLinkedRoleFailure":
            throw await deserializeAws_queryServiceLinkedRoleFailureResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryPutScheduledUpdateGroupActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryPutScheduledUpdateGroupActionCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryPutScheduledUpdateGroupActionCommand = deserializeAws_queryPutScheduledUpdateGroupActionCommand;
const deserializeAws_queryPutScheduledUpdateGroupActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExists":
        case "com.amazonaws.autoscaling#AlreadyExistsFault":
            throw await deserializeAws_queryAlreadyExistsFaultResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.autoscaling#LimitExceededFault":
            throw await deserializeAws_queryLimitExceededFaultResponse(parsedOutput, context);
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryPutWarmPoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryPutWarmPoolCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryPutWarmPoolAnswer(data.PutWarmPoolResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryPutWarmPoolCommand = deserializeAws_queryPutWarmPoolCommand;
const deserializeAws_queryPutWarmPoolCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "LimitExceeded":
        case "com.amazonaws.autoscaling#LimitExceededFault":
            throw await deserializeAws_queryLimitExceededFaultResponse(parsedOutput, context);
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryRecordLifecycleActionHeartbeatCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRecordLifecycleActionHeartbeatCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryRecordLifecycleActionHeartbeatAnswer(data.RecordLifecycleActionHeartbeatResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryRecordLifecycleActionHeartbeatCommand = deserializeAws_queryRecordLifecycleActionHeartbeatCommand;
const deserializeAws_queryRecordLifecycleActionHeartbeatCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryResumeProcessesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryResumeProcessesCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryResumeProcessesCommand = deserializeAws_queryResumeProcessesCommand;
const deserializeAws_queryResumeProcessesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        case "ResourceInUse":
        case "com.amazonaws.autoscaling#ResourceInUseFault":
            throw await deserializeAws_queryResourceInUseFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_querySetDesiredCapacityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_querySetDesiredCapacityCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_querySetDesiredCapacityCommand = deserializeAws_querySetDesiredCapacityCommand;
const deserializeAws_querySetDesiredCapacityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        case "ScalingActivityInProgress":
        case "com.amazonaws.autoscaling#ScalingActivityInProgressFault":
            throw await deserializeAws_queryScalingActivityInProgressFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_querySetInstanceHealthCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_querySetInstanceHealthCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_querySetInstanceHealthCommand = deserializeAws_querySetInstanceHealthCommand;
const deserializeAws_querySetInstanceHealthCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_querySetInstanceProtectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_querySetInstanceProtectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_querySetInstanceProtectionAnswer(data.SetInstanceProtectionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_querySetInstanceProtectionCommand = deserializeAws_querySetInstanceProtectionCommand;
const deserializeAws_querySetInstanceProtectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "LimitExceeded":
        case "com.amazonaws.autoscaling#LimitExceededFault":
            throw await deserializeAws_queryLimitExceededFaultResponse(parsedOutput, context);
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryStartInstanceRefreshCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryStartInstanceRefreshCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryStartInstanceRefreshAnswer(data.StartInstanceRefreshResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryStartInstanceRefreshCommand = deserializeAws_queryStartInstanceRefreshCommand;
const deserializeAws_queryStartInstanceRefreshCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InstanceRefreshInProgress":
        case "com.amazonaws.autoscaling#InstanceRefreshInProgressFault":
            throw await deserializeAws_queryInstanceRefreshInProgressFaultResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.autoscaling#LimitExceededFault":
            throw await deserializeAws_queryLimitExceededFaultResponse(parsedOutput, context);
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_querySuspendProcessesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_querySuspendProcessesCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_querySuspendProcessesCommand = deserializeAws_querySuspendProcessesCommand;
const deserializeAws_querySuspendProcessesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        case "ResourceInUse":
        case "com.amazonaws.autoscaling#ResourceInUseFault":
            throw await deserializeAws_queryResourceInUseFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryTerminateInstanceInAutoScalingGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryTerminateInstanceInAutoScalingGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryActivityType(data.TerminateInstanceInAutoScalingGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryTerminateInstanceInAutoScalingGroupCommand = deserializeAws_queryTerminateInstanceInAutoScalingGroupCommand;
const deserializeAws_queryTerminateInstanceInAutoScalingGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        case "ScalingActivityInProgress":
        case "com.amazonaws.autoscaling#ScalingActivityInProgressFault":
            throw await deserializeAws_queryScalingActivityInProgressFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryUpdateAutoScalingGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateAutoScalingGroupCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryUpdateAutoScalingGroupCommand = deserializeAws_queryUpdateAutoScalingGroupCommand;
const deserializeAws_queryUpdateAutoScalingGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceContention":
        case "com.amazonaws.autoscaling#ResourceContentionFault":
            throw await deserializeAws_queryResourceContentionFaultResponse(parsedOutput, context);
        case "ScalingActivityInProgress":
        case "com.amazonaws.autoscaling#ScalingActivityInProgressFault":
            throw await deserializeAws_queryScalingActivityInProgressFaultResponse(parsedOutput, context);
        case "ServiceLinkedRoleFailure":
        case "com.amazonaws.autoscaling#ServiceLinkedRoleFailure":
            throw await deserializeAws_queryServiceLinkedRoleFailureResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: AutoScalingServiceException_1.AutoScalingServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryActiveInstanceRefreshNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryActiveInstanceRefreshNotFoundFault(body.Error, context);
    const exception = new models_0_1.ActiveInstanceRefreshNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.AlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInstanceRefreshInProgressFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInstanceRefreshInProgressFault(body.Error, context);
    const exception = new models_0_1.InstanceRefreshInProgressFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidNextTokenResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidNextToken(body.Error, context);
    const exception = new models_0_1.InvalidNextToken({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryLimitExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryLimitExceededFault(body.Error, context);
    const exception = new models_0_1.LimitExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryResourceContentionFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryResourceContentionFault(body.Error, context);
    const exception = new models_0_1.ResourceContentionFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryResourceInUseFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryResourceInUseFault(body.Error, context);
    const exception = new models_0_1.ResourceInUseFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryScalingActivityInProgressFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryScalingActivityInProgressFault(body.Error, context);
    const exception = new models_0_1.ScalingActivityInProgressFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryServiceLinkedRoleFailureResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryServiceLinkedRoleFailure(body.Error, context);
    const exception = new models_0_1.ServiceLinkedRoleFailure({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const serializeAws_queryAcceleratorCountRequest = (input, context) => {
    const entries = {};
    if (input.Min != null) {
        entries["Min"] = input.Min;
    }
    if (input.Max != null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const serializeAws_queryAcceleratorManufacturers = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryAcceleratorNames = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryAcceleratorTotalMemoryMiBRequest = (input, context) => {
    const entries = {};
    if (input.Min != null) {
        entries["Min"] = input.Min;
    }
    if (input.Max != null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const serializeAws_queryAcceleratorTypes = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryActivityIds = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryAllowedInstanceTypes = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryAttachInstancesQuery = (input, context) => {
    const entries = {};
    if (input.InstanceIds != null) {
        const memberEntries = serializeAws_queryInstanceIds(input.InstanceIds, context);
        if (input.InstanceIds?.length === 0) {
            entries.InstanceIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    return entries;
};
const serializeAws_queryAttachLoadBalancersType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.LoadBalancerNames != null) {
        const memberEntries = serializeAws_queryLoadBalancerNames(input.LoadBalancerNames, context);
        if (input.LoadBalancerNames?.length === 0) {
            entries.LoadBalancerNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LoadBalancerNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryAttachLoadBalancerTargetGroupsType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.TargetGroupARNs != null) {
        const memberEntries = serializeAws_queryTargetGroupARNs(input.TargetGroupARNs, context);
        if (input.TargetGroupARNs?.length === 0) {
            entries.TargetGroupARNs = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TargetGroupARNs.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryAutoScalingGroupNames = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryAutoScalingGroupNamesType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupNames != null) {
        const memberEntries = serializeAws_queryAutoScalingGroupNames(input.AutoScalingGroupNames, context);
        if (input.AutoScalingGroupNames?.length === 0) {
            entries.AutoScalingGroupNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AutoScalingGroupNames.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilters(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryAutoScalingNotificationTypes = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryAvailabilityZones = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryBaselineEbsBandwidthMbpsRequest = (input, context) => {
    const entries = {};
    if (input.Min != null) {
        entries["Min"] = input.Min;
    }
    if (input.Max != null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const serializeAws_queryBatchDeleteScheduledActionType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.ScheduledActionNames != null) {
        const memberEntries = serializeAws_queryScheduledActionNames(input.ScheduledActionNames, context);
        if (input.ScheduledActionNames?.length === 0) {
            entries.ScheduledActionNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ScheduledActionNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryBatchPutScheduledUpdateGroupActionType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.ScheduledUpdateGroupActions != null) {
        const memberEntries = serializeAws_queryScheduledUpdateGroupActionRequests(input.ScheduledUpdateGroupActions, context);
        if (input.ScheduledUpdateGroupActions?.length === 0) {
            entries.ScheduledUpdateGroupActions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ScheduledUpdateGroupActions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryBlockDeviceMapping = (input, context) => {
    const entries = {};
    if (input.VirtualName != null) {
        entries["VirtualName"] = input.VirtualName;
    }
    if (input.DeviceName != null) {
        entries["DeviceName"] = input.DeviceName;
    }
    if (input.Ebs != null) {
        const memberEntries = serializeAws_queryEbs(input.Ebs, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ebs.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NoDevice != null) {
        entries["NoDevice"] = input.NoDevice;
    }
    return entries;
};
const serializeAws_queryBlockDeviceMappings = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryBlockDeviceMapping(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryCancelInstanceRefreshType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    return entries;
};
const serializeAws_queryCheckpointPercentages = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryClassicLinkVPCSecurityGroups = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryCompleteLifecycleActionType = (input, context) => {
    const entries = {};
    if (input.LifecycleHookName != null) {
        entries["LifecycleHookName"] = input.LifecycleHookName;
    }
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.LifecycleActionToken != null) {
        entries["LifecycleActionToken"] = input.LifecycleActionToken;
    }
    if (input.LifecycleActionResult != null) {
        entries["LifecycleActionResult"] = input.LifecycleActionResult;
    }
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    return entries;
};
const serializeAws_queryCpuManufacturers = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryCreateAutoScalingGroupType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.LaunchConfigurationName != null) {
        entries["LaunchConfigurationName"] = input.LaunchConfigurationName;
    }
    if (input.LaunchTemplate != null) {
        const memberEntries = serializeAws_queryLaunchTemplateSpecification(input.LaunchTemplate, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplate.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MixedInstancesPolicy != null) {
        const memberEntries = serializeAws_queryMixedInstancesPolicy(input.MixedInstancesPolicy, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MixedInstancesPolicy.${key}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.MinSize != null) {
        entries["MinSize"] = input.MinSize;
    }
    if (input.MaxSize != null) {
        entries["MaxSize"] = input.MaxSize;
    }
    if (input.DesiredCapacity != null) {
        entries["DesiredCapacity"] = input.DesiredCapacity;
    }
    if (input.DefaultCooldown != null) {
        entries["DefaultCooldown"] = input.DefaultCooldown;
    }
    if (input.AvailabilityZones != null) {
        const memberEntries = serializeAws_queryAvailabilityZones(input.AvailabilityZones, context);
        if (input.AvailabilityZones?.length === 0) {
            entries.AvailabilityZones = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AvailabilityZones.${key}`;
            entries[loc] = value;
        });
    }
    if (input.LoadBalancerNames != null) {
        const memberEntries = serializeAws_queryLoadBalancerNames(input.LoadBalancerNames, context);
        if (input.LoadBalancerNames?.length === 0) {
            entries.LoadBalancerNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LoadBalancerNames.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TargetGroupARNs != null) {
        const memberEntries = serializeAws_queryTargetGroupARNs(input.TargetGroupARNs, context);
        if (input.TargetGroupARNs?.length === 0) {
            entries.TargetGroupARNs = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TargetGroupARNs.${key}`;
            entries[loc] = value;
        });
    }
    if (input.HealthCheckType != null) {
        entries["HealthCheckType"] = input.HealthCheckType;
    }
    if (input.HealthCheckGracePeriod != null) {
        entries["HealthCheckGracePeriod"] = input.HealthCheckGracePeriod;
    }
    if (input.PlacementGroup != null) {
        entries["PlacementGroup"] = input.PlacementGroup;
    }
    if (input.VPCZoneIdentifier != null) {
        entries["VPCZoneIdentifier"] = input.VPCZoneIdentifier;
    }
    if (input.TerminationPolicies != null) {
        const memberEntries = serializeAws_queryTerminationPolicies(input.TerminationPolicies, context);
        if (input.TerminationPolicies?.length === 0) {
            entries.TerminationPolicies = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TerminationPolicies.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NewInstancesProtectedFromScaleIn != null) {
        entries["NewInstancesProtectedFromScaleIn"] = input.NewInstancesProtectedFromScaleIn;
    }
    if (input.CapacityRebalance != null) {
        entries["CapacityRebalance"] = input.CapacityRebalance;
    }
    if (input.LifecycleHookSpecificationList != null) {
        const memberEntries = serializeAws_queryLifecycleHookSpecifications(input.LifecycleHookSpecificationList, context);
        if (input.LifecycleHookSpecificationList?.length === 0) {
            entries.LifecycleHookSpecificationList = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LifecycleHookSpecificationList.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTags(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ServiceLinkedRoleARN != null) {
        entries["ServiceLinkedRoleARN"] = input.ServiceLinkedRoleARN;
    }
    if (input.MaxInstanceLifetime != null) {
        entries["MaxInstanceLifetime"] = input.MaxInstanceLifetime;
    }
    if (input.Context != null) {
        entries["Context"] = input.Context;
    }
    if (input.DesiredCapacityType != null) {
        entries["DesiredCapacityType"] = input.DesiredCapacityType;
    }
    if (input.DefaultInstanceWarmup != null) {
        entries["DefaultInstanceWarmup"] = input.DefaultInstanceWarmup;
    }
    return entries;
};
const serializeAws_queryCreateLaunchConfigurationType = (input, context) => {
    const entries = {};
    if (input.LaunchConfigurationName != null) {
        entries["LaunchConfigurationName"] = input.LaunchConfigurationName;
    }
    if (input.ImageId != null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.KeyName != null) {
        entries["KeyName"] = input.KeyName;
    }
    if (input.SecurityGroups != null) {
        const memberEntries = serializeAws_querySecurityGroups(input.SecurityGroups, context);
        if (input.SecurityGroups?.length === 0) {
            entries.SecurityGroups = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroups.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ClassicLinkVPCId != null) {
        entries["ClassicLinkVPCId"] = input.ClassicLinkVPCId;
    }
    if (input.ClassicLinkVPCSecurityGroups != null) {
        const memberEntries = serializeAws_queryClassicLinkVPCSecurityGroups(input.ClassicLinkVPCSecurityGroups, context);
        if (input.ClassicLinkVPCSecurityGroups?.length === 0) {
            entries.ClassicLinkVPCSecurityGroups = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClassicLinkVPCSecurityGroups.${key}`;
            entries[loc] = value;
        });
    }
    if (input.UserData != null) {
        entries["UserData"] = input.UserData;
    }
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.InstanceType != null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.KernelId != null) {
        entries["KernelId"] = input.KernelId;
    }
    if (input.RamdiskId != null) {
        entries["RamdiskId"] = input.RamdiskId;
    }
    if (input.BlockDeviceMappings != null) {
        const memberEntries = serializeAws_queryBlockDeviceMappings(input.BlockDeviceMappings, context);
        if (input.BlockDeviceMappings?.length === 0) {
            entries.BlockDeviceMappings = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BlockDeviceMappings.${key}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceMonitoring != null) {
        const memberEntries = serializeAws_queryInstanceMonitoring(input.InstanceMonitoring, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceMonitoring.${key}`;
            entries[loc] = value;
        });
    }
    if (input.SpotPrice != null) {
        entries["SpotPrice"] = input.SpotPrice;
    }
    if (input.IamInstanceProfile != null) {
        entries["IamInstanceProfile"] = input.IamInstanceProfile;
    }
    if (input.EbsOptimized != null) {
        entries["EbsOptimized"] = input.EbsOptimized;
    }
    if (input.AssociatePublicIpAddress != null) {
        entries["AssociatePublicIpAddress"] = input.AssociatePublicIpAddress;
    }
    if (input.PlacementTenancy != null) {
        entries["PlacementTenancy"] = input.PlacementTenancy;
    }
    if (input.MetadataOptions != null) {
        const memberEntries = serializeAws_queryInstanceMetadataOptions(input.MetadataOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MetadataOptions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateOrUpdateTagsType = (input, context) => {
    const entries = {};
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTags(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCustomizedMetricSpecification = (input, context) => {
    const entries = {};
    if (input.MetricName != null) {
        entries["MetricName"] = input.MetricName;
    }
    if (input.Namespace != null) {
        entries["Namespace"] = input.Namespace;
    }
    if (input.Dimensions != null) {
        const memberEntries = serializeAws_queryMetricDimensions(input.Dimensions, context);
        if (input.Dimensions?.length === 0) {
            entries.Dimensions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Dimensions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Statistic != null) {
        entries["Statistic"] = input.Statistic;
    }
    if (input.Unit != null) {
        entries["Unit"] = input.Unit;
    }
    return entries;
};
const serializeAws_queryDeleteAutoScalingGroupType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.ForceDelete != null) {
        entries["ForceDelete"] = input.ForceDelete;
    }
    return entries;
};
const serializeAws_queryDeleteLifecycleHookType = (input, context) => {
    const entries = {};
    if (input.LifecycleHookName != null) {
        entries["LifecycleHookName"] = input.LifecycleHookName;
    }
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    return entries;
};
const serializeAws_queryDeleteNotificationConfigurationType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.TopicARN != null) {
        entries["TopicARN"] = input.TopicARN;
    }
    return entries;
};
const serializeAws_queryDeletePolicyType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.PolicyName != null) {
        entries["PolicyName"] = input.PolicyName;
    }
    return entries;
};
const serializeAws_queryDeleteScheduledActionType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.ScheduledActionName != null) {
        entries["ScheduledActionName"] = input.ScheduledActionName;
    }
    return entries;
};
const serializeAws_queryDeleteTagsType = (input, context) => {
    const entries = {};
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTags(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDeleteWarmPoolType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.ForceDelete != null) {
        entries["ForceDelete"] = input.ForceDelete;
    }
    return entries;
};
const serializeAws_queryDescribeAutoScalingInstancesType = (input, context) => {
    const entries = {};
    if (input.InstanceIds != null) {
        const memberEntries = serializeAws_queryInstanceIds(input.InstanceIds, context);
        if (input.InstanceIds?.length === 0) {
            entries.InstanceIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_queryDescribeInstanceRefreshesType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.InstanceRefreshIds != null) {
        const memberEntries = serializeAws_queryInstanceRefreshIds(input.InstanceRefreshIds, context);
        if (input.InstanceRefreshIds?.length === 0) {
            entries.InstanceRefreshIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceRefreshIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
const serializeAws_queryDescribeLifecycleHooksType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.LifecycleHookNames != null) {
        const memberEntries = serializeAws_queryLifecycleHookNames(input.LifecycleHookNames, context);
        if (input.LifecycleHookNames?.length === 0) {
            entries.LifecycleHookNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LifecycleHookNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDescribeLoadBalancersRequest = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
const serializeAws_queryDescribeLoadBalancerTargetGroupsRequest = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
const serializeAws_queryDescribeNotificationConfigurationsType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupNames != null) {
        const memberEntries = serializeAws_queryAutoScalingGroupNames(input.AutoScalingGroupNames, context);
        if (input.AutoScalingGroupNames?.length === 0) {
            entries.AutoScalingGroupNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AutoScalingGroupNames.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
const serializeAws_queryDescribePoliciesType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.PolicyNames != null) {
        const memberEntries = serializeAws_queryPolicyNames(input.PolicyNames, context);
        if (input.PolicyNames?.length === 0) {
            entries.PolicyNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PolicyNames.${key}`;
            entries[loc] = value;
        });
    }
    if (input.PolicyTypes != null) {
        const memberEntries = serializeAws_queryPolicyTypes(input.PolicyTypes, context);
        if (input.PolicyTypes?.length === 0) {
            entries.PolicyTypes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PolicyTypes.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
const serializeAws_queryDescribeScalingActivitiesType = (input, context) => {
    const entries = {};
    if (input.ActivityIds != null) {
        const memberEntries = serializeAws_queryActivityIds(input.ActivityIds, context);
        if (input.ActivityIds?.length === 0) {
            entries.ActivityIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ActivityIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.IncludeDeletedGroups != null) {
        entries["IncludeDeletedGroups"] = input.IncludeDeletedGroups;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_queryDescribeScheduledActionsType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.ScheduledActionNames != null) {
        const memberEntries = serializeAws_queryScheduledActionNames(input.ScheduledActionNames, context);
        if (input.ScheduledActionNames?.length === 0) {
            entries.ScheduledActionNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ScheduledActionNames.${key}`;
            entries[loc] = value;
        });
    }
    if (input.StartTime != null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    if (input.EndTime != null) {
        entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
const serializeAws_queryDescribeTagsType = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilters(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
const serializeAws_queryDescribeWarmPoolType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_queryDesiredConfiguration = (input, context) => {
    const entries = {};
    if (input.LaunchTemplate != null) {
        const memberEntries = serializeAws_queryLaunchTemplateSpecification(input.LaunchTemplate, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplate.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MixedInstancesPolicy != null) {
        const memberEntries = serializeAws_queryMixedInstancesPolicy(input.MixedInstancesPolicy, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MixedInstancesPolicy.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDetachInstancesQuery = (input, context) => {
    const entries = {};
    if (input.InstanceIds != null) {
        const memberEntries = serializeAws_queryInstanceIds(input.InstanceIds, context);
        if (input.InstanceIds?.length === 0) {
            entries.InstanceIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.ShouldDecrementDesiredCapacity != null) {
        entries["ShouldDecrementDesiredCapacity"] = input.ShouldDecrementDesiredCapacity;
    }
    return entries;
};
const serializeAws_queryDetachLoadBalancersType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.LoadBalancerNames != null) {
        const memberEntries = serializeAws_queryLoadBalancerNames(input.LoadBalancerNames, context);
        if (input.LoadBalancerNames?.length === 0) {
            entries.LoadBalancerNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LoadBalancerNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDetachLoadBalancerTargetGroupsType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.TargetGroupARNs != null) {
        const memberEntries = serializeAws_queryTargetGroupARNs(input.TargetGroupARNs, context);
        if (input.TargetGroupARNs?.length === 0) {
            entries.TargetGroupARNs = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TargetGroupARNs.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDisableMetricsCollectionQuery = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.Metrics != null) {
        const memberEntries = serializeAws_queryMetrics(input.Metrics, context);
        if (input.Metrics?.length === 0) {
            entries.Metrics = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Metrics.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryEbs = (input, context) => {
    const entries = {};
    if (input.SnapshotId != null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.VolumeSize != null) {
        entries["VolumeSize"] = input.VolumeSize;
    }
    if (input.VolumeType != null) {
        entries["VolumeType"] = input.VolumeType;
    }
    if (input.DeleteOnTermination != null) {
        entries["DeleteOnTermination"] = input.DeleteOnTermination;
    }
    if (input.Iops != null) {
        entries["Iops"] = input.Iops;
    }
    if (input.Encrypted != null) {
        entries["Encrypted"] = input.Encrypted;
    }
    if (input.Throughput != null) {
        entries["Throughput"] = input.Throughput;
    }
    return entries;
};
const serializeAws_queryEnableMetricsCollectionQuery = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.Metrics != null) {
        const memberEntries = serializeAws_queryMetrics(input.Metrics, context);
        if (input.Metrics?.length === 0) {
            entries.Metrics = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Metrics.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Granularity != null) {
        entries["Granularity"] = input.Granularity;
    }
    return entries;
};
const serializeAws_queryEnterStandbyQuery = (input, context) => {
    const entries = {};
    if (input.InstanceIds != null) {
        const memberEntries = serializeAws_queryInstanceIds(input.InstanceIds, context);
        if (input.InstanceIds?.length === 0) {
            entries.InstanceIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.ShouldDecrementDesiredCapacity != null) {
        entries["ShouldDecrementDesiredCapacity"] = input.ShouldDecrementDesiredCapacity;
    }
    return entries;
};
const serializeAws_queryExcludedInstanceTypes = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryExecutePolicyType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.PolicyName != null) {
        entries["PolicyName"] = input.PolicyName;
    }
    if (input.HonorCooldown != null) {
        entries["HonorCooldown"] = input.HonorCooldown;
    }
    if (input.MetricValue != null) {
        entries["MetricValue"] = (0, smithy_client_1.serializeFloat)(input.MetricValue);
    }
    if (input.BreachThreshold != null) {
        entries["BreachThreshold"] = (0, smithy_client_1.serializeFloat)(input.BreachThreshold);
    }
    return entries;
};
const serializeAws_queryExitStandbyQuery = (input, context) => {
    const entries = {};
    if (input.InstanceIds != null) {
        const memberEntries = serializeAws_queryInstanceIds(input.InstanceIds, context);
        if (input.InstanceIds?.length === 0) {
            entries.InstanceIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    return entries;
};
const serializeAws_queryFilter = (input, context) => {
    const entries = {};
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.Values != null) {
        const memberEntries = serializeAws_queryValues(input.Values, context);
        if (input.Values?.length === 0) {
            entries.Values = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Values.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryFilters = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryFilter(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryGetPredictiveScalingForecastType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.PolicyName != null) {
        entries["PolicyName"] = input.PolicyName;
    }
    if (input.StartTime != null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    if (input.EndTime != null) {
        entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
    }
    return entries;
};
const serializeAws_queryInstanceGenerations = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryInstanceIds = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryInstanceMetadataOptions = (input, context) => {
    const entries = {};
    if (input.HttpTokens != null) {
        entries["HttpTokens"] = input.HttpTokens;
    }
    if (input.HttpPutResponseHopLimit != null) {
        entries["HttpPutResponseHopLimit"] = input.HttpPutResponseHopLimit;
    }
    if (input.HttpEndpoint != null) {
        entries["HttpEndpoint"] = input.HttpEndpoint;
    }
    return entries;
};
const serializeAws_queryInstanceMonitoring = (input, context) => {
    const entries = {};
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
const serializeAws_queryInstanceRefreshIds = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryInstanceRequirements = (input, context) => {
    const entries = {};
    if (input.VCpuCount != null) {
        const memberEntries = serializeAws_queryVCpuCountRequest(input.VCpuCount, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VCpuCount.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MemoryMiB != null) {
        const memberEntries = serializeAws_queryMemoryMiBRequest(input.MemoryMiB, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MemoryMiB.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CpuManufacturers != null) {
        const memberEntries = serializeAws_queryCpuManufacturers(input.CpuManufacturers, context);
        if (input.CpuManufacturers?.length === 0) {
            entries.CpuManufacturers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CpuManufacturers.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MemoryGiBPerVCpu != null) {
        const memberEntries = serializeAws_queryMemoryGiBPerVCpuRequest(input.MemoryGiBPerVCpu, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MemoryGiBPerVCpu.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ExcludedInstanceTypes != null) {
        const memberEntries = serializeAws_queryExcludedInstanceTypes(input.ExcludedInstanceTypes, context);
        if (input.ExcludedInstanceTypes?.length === 0) {
            entries.ExcludedInstanceTypes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExcludedInstanceTypes.${key}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceGenerations != null) {
        const memberEntries = serializeAws_queryInstanceGenerations(input.InstanceGenerations, context);
        if (input.InstanceGenerations?.length === 0) {
            entries.InstanceGenerations = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceGenerations.${key}`;
            entries[loc] = value;
        });
    }
    if (input.SpotMaxPricePercentageOverLowestPrice != null) {
        entries["SpotMaxPricePercentageOverLowestPrice"] = input.SpotMaxPricePercentageOverLowestPrice;
    }
    if (input.OnDemandMaxPricePercentageOverLowestPrice != null) {
        entries["OnDemandMaxPricePercentageOverLowestPrice"] = input.OnDemandMaxPricePercentageOverLowestPrice;
    }
    if (input.BareMetal != null) {
        entries["BareMetal"] = input.BareMetal;
    }
    if (input.BurstablePerformance != null) {
        entries["BurstablePerformance"] = input.BurstablePerformance;
    }
    if (input.RequireHibernateSupport != null) {
        entries["RequireHibernateSupport"] = input.RequireHibernateSupport;
    }
    if (input.NetworkInterfaceCount != null) {
        const memberEntries = serializeAws_queryNetworkInterfaceCountRequest(input.NetworkInterfaceCount, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceCount.${key}`;
            entries[loc] = value;
        });
    }
    if (input.LocalStorage != null) {
        entries["LocalStorage"] = input.LocalStorage;
    }
    if (input.LocalStorageTypes != null) {
        const memberEntries = serializeAws_queryLocalStorageTypes(input.LocalStorageTypes, context);
        if (input.LocalStorageTypes?.length === 0) {
            entries.LocalStorageTypes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LocalStorageTypes.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TotalLocalStorageGB != null) {
        const memberEntries = serializeAws_queryTotalLocalStorageGBRequest(input.TotalLocalStorageGB, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TotalLocalStorageGB.${key}`;
            entries[loc] = value;
        });
    }
    if (input.BaselineEbsBandwidthMbps != null) {
        const memberEntries = serializeAws_queryBaselineEbsBandwidthMbpsRequest(input.BaselineEbsBandwidthMbps, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BaselineEbsBandwidthMbps.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AcceleratorTypes != null) {
        const memberEntries = serializeAws_queryAcceleratorTypes(input.AcceleratorTypes, context);
        if (input.AcceleratorTypes?.length === 0) {
            entries.AcceleratorTypes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorTypes.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AcceleratorCount != null) {
        const memberEntries = serializeAws_queryAcceleratorCountRequest(input.AcceleratorCount, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorCount.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AcceleratorManufacturers != null) {
        const memberEntries = serializeAws_queryAcceleratorManufacturers(input.AcceleratorManufacturers, context);
        if (input.AcceleratorManufacturers?.length === 0) {
            entries.AcceleratorManufacturers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorManufacturers.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AcceleratorNames != null) {
        const memberEntries = serializeAws_queryAcceleratorNames(input.AcceleratorNames, context);
        if (input.AcceleratorNames?.length === 0) {
            entries.AcceleratorNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorNames.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AcceleratorTotalMemoryMiB != null) {
        const memberEntries = serializeAws_queryAcceleratorTotalMemoryMiBRequest(input.AcceleratorTotalMemoryMiB, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorTotalMemoryMiB.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkBandwidthGbps != null) {
        const memberEntries = serializeAws_queryNetworkBandwidthGbpsRequest(input.NetworkBandwidthGbps, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkBandwidthGbps.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AllowedInstanceTypes != null) {
        const memberEntries = serializeAws_queryAllowedInstanceTypes(input.AllowedInstanceTypes, context);
        if (input.AllowedInstanceTypes?.length === 0) {
            entries.AllowedInstanceTypes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AllowedInstanceTypes.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryInstanceReusePolicy = (input, context) => {
    const entries = {};
    if (input.ReuseOnScaleIn != null) {
        entries["ReuseOnScaleIn"] = input.ReuseOnScaleIn;
    }
    return entries;
};
const serializeAws_queryInstancesDistribution = (input, context) => {
    const entries = {};
    if (input.OnDemandAllocationStrategy != null) {
        entries["OnDemandAllocationStrategy"] = input.OnDemandAllocationStrategy;
    }
    if (input.OnDemandBaseCapacity != null) {
        entries["OnDemandBaseCapacity"] = input.OnDemandBaseCapacity;
    }
    if (input.OnDemandPercentageAboveBaseCapacity != null) {
        entries["OnDemandPercentageAboveBaseCapacity"] = input.OnDemandPercentageAboveBaseCapacity;
    }
    if (input.SpotAllocationStrategy != null) {
        entries["SpotAllocationStrategy"] = input.SpotAllocationStrategy;
    }
    if (input.SpotInstancePools != null) {
        entries["SpotInstancePools"] = input.SpotInstancePools;
    }
    if (input.SpotMaxPrice != null) {
        entries["SpotMaxPrice"] = input.SpotMaxPrice;
    }
    return entries;
};
const serializeAws_queryLaunchConfigurationNames = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryLaunchConfigurationNamesType = (input, context) => {
    const entries = {};
    if (input.LaunchConfigurationNames != null) {
        const memberEntries = serializeAws_queryLaunchConfigurationNames(input.LaunchConfigurationNames, context);
        if (input.LaunchConfigurationNames?.length === 0) {
            entries.LaunchConfigurationNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchConfigurationNames.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
const serializeAws_queryLaunchConfigurationNameType = (input, context) => {
    const entries = {};
    if (input.LaunchConfigurationName != null) {
        entries["LaunchConfigurationName"] = input.LaunchConfigurationName;
    }
    return entries;
};
const serializeAws_queryLaunchTemplate = (input, context) => {
    const entries = {};
    if (input.LaunchTemplateSpecification != null) {
        const memberEntries = serializeAws_queryLaunchTemplateSpecification(input.LaunchTemplateSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Overrides != null) {
        const memberEntries = serializeAws_queryOverrides(input.Overrides, context);
        if (input.Overrides?.length === 0) {
            entries.Overrides = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Overrides.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryLaunchTemplateOverrides = (input, context) => {
    const entries = {};
    if (input.InstanceType != null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.WeightedCapacity != null) {
        entries["WeightedCapacity"] = input.WeightedCapacity;
    }
    if (input.LaunchTemplateSpecification != null) {
        const memberEntries = serializeAws_queryLaunchTemplateSpecification(input.LaunchTemplateSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceRequirements != null) {
        const memberEntries = serializeAws_queryInstanceRequirements(input.InstanceRequirements, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceRequirements.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryLaunchTemplateSpecification = (input, context) => {
    const entries = {};
    if (input.LaunchTemplateId != null) {
        entries["LaunchTemplateId"] = input.LaunchTemplateId;
    }
    if (input.LaunchTemplateName != null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    if (input.Version != null) {
        entries["Version"] = input.Version;
    }
    return entries;
};
const serializeAws_queryLifecycleHookNames = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryLifecycleHookSpecification = (input, context) => {
    const entries = {};
    if (input.LifecycleHookName != null) {
        entries["LifecycleHookName"] = input.LifecycleHookName;
    }
    if (input.LifecycleTransition != null) {
        entries["LifecycleTransition"] = input.LifecycleTransition;
    }
    if (input.NotificationMetadata != null) {
        entries["NotificationMetadata"] = input.NotificationMetadata;
    }
    if (input.HeartbeatTimeout != null) {
        entries["HeartbeatTimeout"] = input.HeartbeatTimeout;
    }
    if (input.DefaultResult != null) {
        entries["DefaultResult"] = input.DefaultResult;
    }
    if (input.NotificationTargetARN != null) {
        entries["NotificationTargetARN"] = input.NotificationTargetARN;
    }
    if (input.RoleARN != null) {
        entries["RoleARN"] = input.RoleARN;
    }
    return entries;
};
const serializeAws_queryLifecycleHookSpecifications = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryLifecycleHookSpecification(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryLoadBalancerNames = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryLocalStorageTypes = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryMemoryGiBPerVCpuRequest = (input, context) => {
    const entries = {};
    if (input.Min != null) {
        entries["Min"] = (0, smithy_client_1.serializeFloat)(input.Min);
    }
    if (input.Max != null) {
        entries["Max"] = (0, smithy_client_1.serializeFloat)(input.Max);
    }
    return entries;
};
const serializeAws_queryMemoryMiBRequest = (input, context) => {
    const entries = {};
    if (input.Min != null) {
        entries["Min"] = input.Min;
    }
    if (input.Max != null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const serializeAws_queryMetric = (input, context) => {
    const entries = {};
    if (input.Namespace != null) {
        entries["Namespace"] = input.Namespace;
    }
    if (input.MetricName != null) {
        entries["MetricName"] = input.MetricName;
    }
    if (input.Dimensions != null) {
        const memberEntries = serializeAws_queryMetricDimensions(input.Dimensions, context);
        if (input.Dimensions?.length === 0) {
            entries.Dimensions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Dimensions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryMetricDataQueries = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryMetricDataQuery(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryMetricDataQuery = (input, context) => {
    const entries = {};
    if (input.Id != null) {
        entries["Id"] = input.Id;
    }
    if (input.Expression != null) {
        entries["Expression"] = input.Expression;
    }
    if (input.MetricStat != null) {
        const memberEntries = serializeAws_queryMetricStat(input.MetricStat, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MetricStat.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Label != null) {
        entries["Label"] = input.Label;
    }
    if (input.ReturnData != null) {
        entries["ReturnData"] = input.ReturnData;
    }
    return entries;
};
const serializeAws_queryMetricDimension = (input, context) => {
    const entries = {};
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const serializeAws_queryMetricDimensions = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryMetricDimension(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryMetrics = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryMetricStat = (input, context) => {
    const entries = {};
    if (input.Metric != null) {
        const memberEntries = serializeAws_queryMetric(input.Metric, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Metric.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Stat != null) {
        entries["Stat"] = input.Stat;
    }
    if (input.Unit != null) {
        entries["Unit"] = input.Unit;
    }
    return entries;
};
const serializeAws_queryMixedInstancesPolicy = (input, context) => {
    const entries = {};
    if (input.LaunchTemplate != null) {
        const memberEntries = serializeAws_queryLaunchTemplate(input.LaunchTemplate, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplate.${key}`;
            entries[loc] = value;
        });
    }
    if (input.InstancesDistribution != null) {
        const memberEntries = serializeAws_queryInstancesDistribution(input.InstancesDistribution, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstancesDistribution.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryNetworkBandwidthGbpsRequest = (input, context) => {
    const entries = {};
    if (input.Min != null) {
        entries["Min"] = (0, smithy_client_1.serializeFloat)(input.Min);
    }
    if (input.Max != null) {
        entries["Max"] = (0, smithy_client_1.serializeFloat)(input.Max);
    }
    return entries;
};
const serializeAws_queryNetworkInterfaceCountRequest = (input, context) => {
    const entries = {};
    if (input.Min != null) {
        entries["Min"] = input.Min;
    }
    if (input.Max != null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const serializeAws_queryOverrides = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryLaunchTemplateOverrides(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryPolicyNames = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryPolicyTypes = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryPredefinedMetricSpecification = (input, context) => {
    const entries = {};
    if (input.PredefinedMetricType != null) {
        entries["PredefinedMetricType"] = input.PredefinedMetricType;
    }
    if (input.ResourceLabel != null) {
        entries["ResourceLabel"] = input.ResourceLabel;
    }
    return entries;
};
const serializeAws_queryPredictiveScalingConfiguration = (input, context) => {
    const entries = {};
    if (input.MetricSpecifications != null) {
        const memberEntries = serializeAws_queryPredictiveScalingMetricSpecifications(input.MetricSpecifications, context);
        if (input.MetricSpecifications?.length === 0) {
            entries.MetricSpecifications = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MetricSpecifications.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Mode != null) {
        entries["Mode"] = input.Mode;
    }
    if (input.SchedulingBufferTime != null) {
        entries["SchedulingBufferTime"] = input.SchedulingBufferTime;
    }
    if (input.MaxCapacityBreachBehavior != null) {
        entries["MaxCapacityBreachBehavior"] = input.MaxCapacityBreachBehavior;
    }
    if (input.MaxCapacityBuffer != null) {
        entries["MaxCapacityBuffer"] = input.MaxCapacityBuffer;
    }
    return entries;
};
const serializeAws_queryPredictiveScalingCustomizedCapacityMetric = (input, context) => {
    const entries = {};
    if (input.MetricDataQueries != null) {
        const memberEntries = serializeAws_queryMetricDataQueries(input.MetricDataQueries, context);
        if (input.MetricDataQueries?.length === 0) {
            entries.MetricDataQueries = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MetricDataQueries.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryPredictiveScalingCustomizedLoadMetric = (input, context) => {
    const entries = {};
    if (input.MetricDataQueries != null) {
        const memberEntries = serializeAws_queryMetricDataQueries(input.MetricDataQueries, context);
        if (input.MetricDataQueries?.length === 0) {
            entries.MetricDataQueries = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MetricDataQueries.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryPredictiveScalingCustomizedScalingMetric = (input, context) => {
    const entries = {};
    if (input.MetricDataQueries != null) {
        const memberEntries = serializeAws_queryMetricDataQueries(input.MetricDataQueries, context);
        if (input.MetricDataQueries?.length === 0) {
            entries.MetricDataQueries = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MetricDataQueries.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryPredictiveScalingMetricSpecification = (input, context) => {
    const entries = {};
    if (input.TargetValue != null) {
        entries["TargetValue"] = (0, smithy_client_1.serializeFloat)(input.TargetValue);
    }
    if (input.PredefinedMetricPairSpecification != null) {
        const memberEntries = serializeAws_queryPredictiveScalingPredefinedMetricPair(input.PredefinedMetricPairSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PredefinedMetricPairSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.PredefinedScalingMetricSpecification != null) {
        const memberEntries = serializeAws_queryPredictiveScalingPredefinedScalingMetric(input.PredefinedScalingMetricSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PredefinedScalingMetricSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.PredefinedLoadMetricSpecification != null) {
        const memberEntries = serializeAws_queryPredictiveScalingPredefinedLoadMetric(input.PredefinedLoadMetricSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PredefinedLoadMetricSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CustomizedScalingMetricSpecification != null) {
        const memberEntries = serializeAws_queryPredictiveScalingCustomizedScalingMetric(input.CustomizedScalingMetricSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CustomizedScalingMetricSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CustomizedLoadMetricSpecification != null) {
        const memberEntries = serializeAws_queryPredictiveScalingCustomizedLoadMetric(input.CustomizedLoadMetricSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CustomizedLoadMetricSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CustomizedCapacityMetricSpecification != null) {
        const memberEntries = serializeAws_queryPredictiveScalingCustomizedCapacityMetric(input.CustomizedCapacityMetricSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CustomizedCapacityMetricSpecification.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryPredictiveScalingMetricSpecifications = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryPredictiveScalingMetricSpecification(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryPredictiveScalingPredefinedLoadMetric = (input, context) => {
    const entries = {};
    if (input.PredefinedMetricType != null) {
        entries["PredefinedMetricType"] = input.PredefinedMetricType;
    }
    if (input.ResourceLabel != null) {
        entries["ResourceLabel"] = input.ResourceLabel;
    }
    return entries;
};
const serializeAws_queryPredictiveScalingPredefinedMetricPair = (input, context) => {
    const entries = {};
    if (input.PredefinedMetricType != null) {
        entries["PredefinedMetricType"] = input.PredefinedMetricType;
    }
    if (input.ResourceLabel != null) {
        entries["ResourceLabel"] = input.ResourceLabel;
    }
    return entries;
};
const serializeAws_queryPredictiveScalingPredefinedScalingMetric = (input, context) => {
    const entries = {};
    if (input.PredefinedMetricType != null) {
        entries["PredefinedMetricType"] = input.PredefinedMetricType;
    }
    if (input.ResourceLabel != null) {
        entries["ResourceLabel"] = input.ResourceLabel;
    }
    return entries;
};
const serializeAws_queryProcessNames = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryPutLifecycleHookType = (input, context) => {
    const entries = {};
    if (input.LifecycleHookName != null) {
        entries["LifecycleHookName"] = input.LifecycleHookName;
    }
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.LifecycleTransition != null) {
        entries["LifecycleTransition"] = input.LifecycleTransition;
    }
    if (input.RoleARN != null) {
        entries["RoleARN"] = input.RoleARN;
    }
    if (input.NotificationTargetARN != null) {
        entries["NotificationTargetARN"] = input.NotificationTargetARN;
    }
    if (input.NotificationMetadata != null) {
        entries["NotificationMetadata"] = input.NotificationMetadata;
    }
    if (input.HeartbeatTimeout != null) {
        entries["HeartbeatTimeout"] = input.HeartbeatTimeout;
    }
    if (input.DefaultResult != null) {
        entries["DefaultResult"] = input.DefaultResult;
    }
    return entries;
};
const serializeAws_queryPutNotificationConfigurationType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.TopicARN != null) {
        entries["TopicARN"] = input.TopicARN;
    }
    if (input.NotificationTypes != null) {
        const memberEntries = serializeAws_queryAutoScalingNotificationTypes(input.NotificationTypes, context);
        if (input.NotificationTypes?.length === 0) {
            entries.NotificationTypes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NotificationTypes.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryPutScalingPolicyType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.PolicyName != null) {
        entries["PolicyName"] = input.PolicyName;
    }
    if (input.PolicyType != null) {
        entries["PolicyType"] = input.PolicyType;
    }
    if (input.AdjustmentType != null) {
        entries["AdjustmentType"] = input.AdjustmentType;
    }
    if (input.MinAdjustmentStep != null) {
        entries["MinAdjustmentStep"] = input.MinAdjustmentStep;
    }
    if (input.MinAdjustmentMagnitude != null) {
        entries["MinAdjustmentMagnitude"] = input.MinAdjustmentMagnitude;
    }
    if (input.ScalingAdjustment != null) {
        entries["ScalingAdjustment"] = input.ScalingAdjustment;
    }
    if (input.Cooldown != null) {
        entries["Cooldown"] = input.Cooldown;
    }
    if (input.MetricAggregationType != null) {
        entries["MetricAggregationType"] = input.MetricAggregationType;
    }
    if (input.StepAdjustments != null) {
        const memberEntries = serializeAws_queryStepAdjustments(input.StepAdjustments, context);
        if (input.StepAdjustments?.length === 0) {
            entries.StepAdjustments = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `StepAdjustments.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EstimatedInstanceWarmup != null) {
        entries["EstimatedInstanceWarmup"] = input.EstimatedInstanceWarmup;
    }
    if (input.TargetTrackingConfiguration != null) {
        const memberEntries = serializeAws_queryTargetTrackingConfiguration(input.TargetTrackingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TargetTrackingConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    if (input.PredictiveScalingConfiguration != null) {
        const memberEntries = serializeAws_queryPredictiveScalingConfiguration(input.PredictiveScalingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PredictiveScalingConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryPutScheduledUpdateGroupActionType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.ScheduledActionName != null) {
        entries["ScheduledActionName"] = input.ScheduledActionName;
    }
    if (input.Time != null) {
        entries["Time"] = input.Time.toISOString().split(".")[0] + "Z";
    }
    if (input.StartTime != null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    if (input.EndTime != null) {
        entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
    }
    if (input.Recurrence != null) {
        entries["Recurrence"] = input.Recurrence;
    }
    if (input.MinSize != null) {
        entries["MinSize"] = input.MinSize;
    }
    if (input.MaxSize != null) {
        entries["MaxSize"] = input.MaxSize;
    }
    if (input.DesiredCapacity != null) {
        entries["DesiredCapacity"] = input.DesiredCapacity;
    }
    if (input.TimeZone != null) {
        entries["TimeZone"] = input.TimeZone;
    }
    return entries;
};
const serializeAws_queryPutWarmPoolType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.MaxGroupPreparedCapacity != null) {
        entries["MaxGroupPreparedCapacity"] = input.MaxGroupPreparedCapacity;
    }
    if (input.MinSize != null) {
        entries["MinSize"] = input.MinSize;
    }
    if (input.PoolState != null) {
        entries["PoolState"] = input.PoolState;
    }
    if (input.InstanceReusePolicy != null) {
        const memberEntries = serializeAws_queryInstanceReusePolicy(input.InstanceReusePolicy, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceReusePolicy.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryRecordLifecycleActionHeartbeatType = (input, context) => {
    const entries = {};
    if (input.LifecycleHookName != null) {
        entries["LifecycleHookName"] = input.LifecycleHookName;
    }
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.LifecycleActionToken != null) {
        entries["LifecycleActionToken"] = input.LifecycleActionToken;
    }
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    return entries;
};
const serializeAws_queryRefreshPreferences = (input, context) => {
    const entries = {};
    if (input.MinHealthyPercentage != null) {
        entries["MinHealthyPercentage"] = input.MinHealthyPercentage;
    }
    if (input.InstanceWarmup != null) {
        entries["InstanceWarmup"] = input.InstanceWarmup;
    }
    if (input.CheckpointPercentages != null) {
        const memberEntries = serializeAws_queryCheckpointPercentages(input.CheckpointPercentages, context);
        if (input.CheckpointPercentages?.length === 0) {
            entries.CheckpointPercentages = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CheckpointPercentages.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CheckpointDelay != null) {
        entries["CheckpointDelay"] = input.CheckpointDelay;
    }
    if (input.SkipMatching != null) {
        entries["SkipMatching"] = input.SkipMatching;
    }
    return entries;
};
const serializeAws_queryScalingProcessQuery = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.ScalingProcesses != null) {
        const memberEntries = serializeAws_queryProcessNames(input.ScalingProcesses, context);
        if (input.ScalingProcesses?.length === 0) {
            entries.ScalingProcesses = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ScalingProcesses.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryScheduledActionNames = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryScheduledUpdateGroupActionRequest = (input, context) => {
    const entries = {};
    if (input.ScheduledActionName != null) {
        entries["ScheduledActionName"] = input.ScheduledActionName;
    }
    if (input.StartTime != null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    if (input.EndTime != null) {
        entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
    }
    if (input.Recurrence != null) {
        entries["Recurrence"] = input.Recurrence;
    }
    if (input.MinSize != null) {
        entries["MinSize"] = input.MinSize;
    }
    if (input.MaxSize != null) {
        entries["MaxSize"] = input.MaxSize;
    }
    if (input.DesiredCapacity != null) {
        entries["DesiredCapacity"] = input.DesiredCapacity;
    }
    if (input.TimeZone != null) {
        entries["TimeZone"] = input.TimeZone;
    }
    return entries;
};
const serializeAws_queryScheduledUpdateGroupActionRequests = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryScheduledUpdateGroupActionRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_querySecurityGroups = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_querySetDesiredCapacityType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.DesiredCapacity != null) {
        entries["DesiredCapacity"] = input.DesiredCapacity;
    }
    if (input.HonorCooldown != null) {
        entries["HonorCooldown"] = input.HonorCooldown;
    }
    return entries;
};
const serializeAws_querySetInstanceHealthQuery = (input, context) => {
    const entries = {};
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.HealthStatus != null) {
        entries["HealthStatus"] = input.HealthStatus;
    }
    if (input.ShouldRespectGracePeriod != null) {
        entries["ShouldRespectGracePeriod"] = input.ShouldRespectGracePeriod;
    }
    return entries;
};
const serializeAws_querySetInstanceProtectionQuery = (input, context) => {
    const entries = {};
    if (input.InstanceIds != null) {
        const memberEntries = serializeAws_queryInstanceIds(input.InstanceIds, context);
        if (input.InstanceIds?.length === 0) {
            entries.InstanceIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.ProtectedFromScaleIn != null) {
        entries["ProtectedFromScaleIn"] = input.ProtectedFromScaleIn;
    }
    return entries;
};
const serializeAws_queryStartInstanceRefreshType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.Strategy != null) {
        entries["Strategy"] = input.Strategy;
    }
    if (input.DesiredConfiguration != null) {
        const memberEntries = serializeAws_queryDesiredConfiguration(input.DesiredConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DesiredConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Preferences != null) {
        const memberEntries = serializeAws_queryRefreshPreferences(input.Preferences, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Preferences.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryStepAdjustment = (input, context) => {
    const entries = {};
    if (input.MetricIntervalLowerBound != null) {
        entries["MetricIntervalLowerBound"] = (0, smithy_client_1.serializeFloat)(input.MetricIntervalLowerBound);
    }
    if (input.MetricIntervalUpperBound != null) {
        entries["MetricIntervalUpperBound"] = (0, smithy_client_1.serializeFloat)(input.MetricIntervalUpperBound);
    }
    if (input.ScalingAdjustment != null) {
        entries["ScalingAdjustment"] = input.ScalingAdjustment;
    }
    return entries;
};
const serializeAws_queryStepAdjustments = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryStepAdjustment(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryTag = (input, context) => {
    const entries = {};
    if (input.ResourceId != null) {
        entries["ResourceId"] = input.ResourceId;
    }
    if (input.ResourceType != null) {
        entries["ResourceType"] = input.ResourceType;
    }
    if (input.Key != null) {
        entries["Key"] = input.Key;
    }
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    if (input.PropagateAtLaunch != null) {
        entries["PropagateAtLaunch"] = input.PropagateAtLaunch;
    }
    return entries;
};
const serializeAws_queryTags = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryTag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryTargetGroupARNs = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryTargetTrackingConfiguration = (input, context) => {
    const entries = {};
    if (input.PredefinedMetricSpecification != null) {
        const memberEntries = serializeAws_queryPredefinedMetricSpecification(input.PredefinedMetricSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PredefinedMetricSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CustomizedMetricSpecification != null) {
        const memberEntries = serializeAws_queryCustomizedMetricSpecification(input.CustomizedMetricSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CustomizedMetricSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TargetValue != null) {
        entries["TargetValue"] = (0, smithy_client_1.serializeFloat)(input.TargetValue);
    }
    if (input.DisableScaleIn != null) {
        entries["DisableScaleIn"] = input.DisableScaleIn;
    }
    return entries;
};
const serializeAws_queryTerminateInstanceInAutoScalingGroupType = (input, context) => {
    const entries = {};
    if (input.InstanceId != null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.ShouldDecrementDesiredCapacity != null) {
        entries["ShouldDecrementDesiredCapacity"] = input.ShouldDecrementDesiredCapacity;
    }
    return entries;
};
const serializeAws_queryTerminationPolicies = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryTotalLocalStorageGBRequest = (input, context) => {
    const entries = {};
    if (input.Min != null) {
        entries["Min"] = (0, smithy_client_1.serializeFloat)(input.Min);
    }
    if (input.Max != null) {
        entries["Max"] = (0, smithy_client_1.serializeFloat)(input.Max);
    }
    return entries;
};
const serializeAws_queryUpdateAutoScalingGroupType = (input, context) => {
    const entries = {};
    if (input.AutoScalingGroupName != null) {
        entries["AutoScalingGroupName"] = input.AutoScalingGroupName;
    }
    if (input.LaunchConfigurationName != null) {
        entries["LaunchConfigurationName"] = input.LaunchConfigurationName;
    }
    if (input.LaunchTemplate != null) {
        const memberEntries = serializeAws_queryLaunchTemplateSpecification(input.LaunchTemplate, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplate.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MixedInstancesPolicy != null) {
        const memberEntries = serializeAws_queryMixedInstancesPolicy(input.MixedInstancesPolicy, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MixedInstancesPolicy.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MinSize != null) {
        entries["MinSize"] = input.MinSize;
    }
    if (input.MaxSize != null) {
        entries["MaxSize"] = input.MaxSize;
    }
    if (input.DesiredCapacity != null) {
        entries["DesiredCapacity"] = input.DesiredCapacity;
    }
    if (input.DefaultCooldown != null) {
        entries["DefaultCooldown"] = input.DefaultCooldown;
    }
    if (input.AvailabilityZones != null) {
        const memberEntries = serializeAws_queryAvailabilityZones(input.AvailabilityZones, context);
        if (input.AvailabilityZones?.length === 0) {
            entries.AvailabilityZones = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AvailabilityZones.${key}`;
            entries[loc] = value;
        });
    }
    if (input.HealthCheckType != null) {
        entries["HealthCheckType"] = input.HealthCheckType;
    }
    if (input.HealthCheckGracePeriod != null) {
        entries["HealthCheckGracePeriod"] = input.HealthCheckGracePeriod;
    }
    if (input.PlacementGroup != null) {
        entries["PlacementGroup"] = input.PlacementGroup;
    }
    if (input.VPCZoneIdentifier != null) {
        entries["VPCZoneIdentifier"] = input.VPCZoneIdentifier;
    }
    if (input.TerminationPolicies != null) {
        const memberEntries = serializeAws_queryTerminationPolicies(input.TerminationPolicies, context);
        if (input.TerminationPolicies?.length === 0) {
            entries.TerminationPolicies = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TerminationPolicies.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NewInstancesProtectedFromScaleIn != null) {
        entries["NewInstancesProtectedFromScaleIn"] = input.NewInstancesProtectedFromScaleIn;
    }
    if (input.ServiceLinkedRoleARN != null) {
        entries["ServiceLinkedRoleARN"] = input.ServiceLinkedRoleARN;
    }
    if (input.MaxInstanceLifetime != null) {
        entries["MaxInstanceLifetime"] = input.MaxInstanceLifetime;
    }
    if (input.CapacityRebalance != null) {
        entries["CapacityRebalance"] = input.CapacityRebalance;
    }
    if (input.Context != null) {
        entries["Context"] = input.Context;
    }
    if (input.DesiredCapacityType != null) {
        entries["DesiredCapacityType"] = input.DesiredCapacityType;
    }
    if (input.DefaultInstanceWarmup != null) {
        entries["DefaultInstanceWarmup"] = input.DefaultInstanceWarmup;
    }
    return entries;
};
const serializeAws_queryValues = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryVCpuCountRequest = (input, context) => {
    const entries = {};
    if (input.Min != null) {
        entries["Min"] = input.Min;
    }
    if (input.Max != null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const deserializeAws_queryAcceleratorCountRequest = (output, context) => {
    const contents = {
        Min: undefined,
        Max: undefined,
    };
    if (output["Min"] !== undefined) {
        contents.Min = (0, smithy_client_1.strictParseInt32)(output["Min"]);
    }
    if (output["Max"] !== undefined) {
        contents.Max = (0, smithy_client_1.strictParseInt32)(output["Max"]);
    }
    return contents;
};
const deserializeAws_queryAcceleratorManufacturers = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_queryAcceleratorNames = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_queryAcceleratorTotalMemoryMiBRequest = (output, context) => {
    const contents = {
        Min: undefined,
        Max: undefined,
    };
    if (output["Min"] !== undefined) {
        contents.Min = (0, smithy_client_1.strictParseInt32)(output["Min"]);
    }
    if (output["Max"] !== undefined) {
        contents.Max = (0, smithy_client_1.strictParseInt32)(output["Max"]);
    }
    return contents;
};
const deserializeAws_queryAcceleratorTypes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_queryActiveInstanceRefreshNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryActivities = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryActivity(entry, context);
    });
};
const deserializeAws_queryActivitiesType = (output, context) => {
    const contents = {
        Activities: undefined,
        NextToken: undefined,
    };
    if (output.Activities === "") {
        contents.Activities = [];
    }
    else if (output["Activities"] !== undefined && output["Activities"]["member"] !== undefined) {
        contents.Activities = deserializeAws_queryActivities((0, smithy_client_1.getArrayIfSingleItem)(output["Activities"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryActivity = (output, context) => {
    const contents = {
        ActivityId: undefined,
        AutoScalingGroupName: undefined,
        Description: undefined,
        Cause: undefined,
        StartTime: undefined,
        EndTime: undefined,
        StatusCode: undefined,
        StatusMessage: undefined,
        Progress: undefined,
        Details: undefined,
        AutoScalingGroupState: undefined,
        AutoScalingGroupARN: undefined,
    };
    if (output["ActivityId"] !== undefined) {
        contents.ActivityId = (0, smithy_client_1.expectString)(output["ActivityId"]);
    }
    if (output["AutoScalingGroupName"] !== undefined) {
        contents.AutoScalingGroupName = (0, smithy_client_1.expectString)(output["AutoScalingGroupName"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
    }
    if (output["Cause"] !== undefined) {
        contents.Cause = (0, smithy_client_1.expectString)(output["Cause"]);
    }
    if (output["StartTime"] !== undefined) {
        contents.StartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["StartTime"]));
    }
    if (output["EndTime"] !== undefined) {
        contents.EndTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["EndTime"]));
    }
    if (output["StatusCode"] !== undefined) {
        contents.StatusCode = (0, smithy_client_1.expectString)(output["StatusCode"]);
    }
    if (output["StatusMessage"] !== undefined) {
        contents.StatusMessage = (0, smithy_client_1.expectString)(output["StatusMessage"]);
    }
    if (output["Progress"] !== undefined) {
        contents.Progress = (0, smithy_client_1.strictParseInt32)(output["Progress"]);
    }
    if (output["Details"] !== undefined) {
        contents.Details = (0, smithy_client_1.expectString)(output["Details"]);
    }
    if (output["AutoScalingGroupState"] !== undefined) {
        contents.AutoScalingGroupState = (0, smithy_client_1.expectString)(output["AutoScalingGroupState"]);
    }
    if (output["AutoScalingGroupARN"] !== undefined) {
        contents.AutoScalingGroupARN = (0, smithy_client_1.expectString)(output["AutoScalingGroupARN"]);
    }
    return contents;
};
const deserializeAws_queryActivityType = (output, context) => {
    const contents = {
        Activity: undefined,
    };
    if (output["Activity"] !== undefined) {
        contents.Activity = deserializeAws_queryActivity(output["Activity"], context);
    }
    return contents;
};
const deserializeAws_queryAdjustmentType = (output, context) => {
    const contents = {
        AdjustmentType: undefined,
    };
    if (output["AdjustmentType"] !== undefined) {
        contents.AdjustmentType = (0, smithy_client_1.expectString)(output["AdjustmentType"]);
    }
    return contents;
};
const deserializeAws_queryAdjustmentTypes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryAdjustmentType(entry, context);
    });
};
const deserializeAws_queryAlarm = (output, context) => {
    const contents = {
        AlarmName: undefined,
        AlarmARN: undefined,
    };
    if (output["AlarmName"] !== undefined) {
        contents.AlarmName = (0, smithy_client_1.expectString)(output["AlarmName"]);
    }
    if (output["AlarmARN"] !== undefined) {
        contents.AlarmARN = (0, smithy_client_1.expectString)(output["AlarmARN"]);
    }
    return contents;
};
const deserializeAws_queryAlarms = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryAlarm(entry, context);
    });
};
const deserializeAws_queryAllowedInstanceTypes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_queryAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryAttachLoadBalancersResultType = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryAttachLoadBalancerTargetGroupsResultType = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryAutoScalingGroup = (output, context) => {
    const contents = {
        AutoScalingGroupName: undefined,
        AutoScalingGroupARN: undefined,
        LaunchConfigurationName: undefined,
        LaunchTemplate: undefined,
        MixedInstancesPolicy: undefined,
        MinSize: undefined,
        MaxSize: undefined,
        DesiredCapacity: undefined,
        PredictedCapacity: undefined,
        DefaultCooldown: undefined,
        AvailabilityZones: undefined,
        LoadBalancerNames: undefined,
        TargetGroupARNs: undefined,
        HealthCheckType: undefined,
        HealthCheckGracePeriod: undefined,
        Instances: undefined,
        CreatedTime: undefined,
        SuspendedProcesses: undefined,
        PlacementGroup: undefined,
        VPCZoneIdentifier: undefined,
        EnabledMetrics: undefined,
        Status: undefined,
        Tags: undefined,
        TerminationPolicies: undefined,
        NewInstancesProtectedFromScaleIn: undefined,
        ServiceLinkedRoleARN: undefined,
        MaxInstanceLifetime: undefined,
        CapacityRebalance: undefined,
        WarmPoolConfiguration: undefined,
        WarmPoolSize: undefined,
        Context: undefined,
        DesiredCapacityType: undefined,
        DefaultInstanceWarmup: undefined,
    };
    if (output["AutoScalingGroupName"] !== undefined) {
        contents.AutoScalingGroupName = (0, smithy_client_1.expectString)(output["AutoScalingGroupName"]);
    }
    if (output["AutoScalingGroupARN"] !== undefined) {
        contents.AutoScalingGroupARN = (0, smithy_client_1.expectString)(output["AutoScalingGroupARN"]);
    }
    if (output["LaunchConfigurationName"] !== undefined) {
        contents.LaunchConfigurationName = (0, smithy_client_1.expectString)(output["LaunchConfigurationName"]);
    }
    if (output["LaunchTemplate"] !== undefined) {
        contents.LaunchTemplate = deserializeAws_queryLaunchTemplateSpecification(output["LaunchTemplate"], context);
    }
    if (output["MixedInstancesPolicy"] !== undefined) {
        contents.MixedInstancesPolicy = deserializeAws_queryMixedInstancesPolicy(output["MixedInstancesPolicy"], context);
    }
    if (output["MinSize"] !== undefined) {
        contents.MinSize = (0, smithy_client_1.strictParseInt32)(output["MinSize"]);
    }
    if (output["MaxSize"] !== undefined) {
        contents.MaxSize = (0, smithy_client_1.strictParseInt32)(output["MaxSize"]);
    }
    if (output["DesiredCapacity"] !== undefined) {
        contents.DesiredCapacity = (0, smithy_client_1.strictParseInt32)(output["DesiredCapacity"]);
    }
    if (output["PredictedCapacity"] !== undefined) {
        contents.PredictedCapacity = (0, smithy_client_1.strictParseInt32)(output["PredictedCapacity"]);
    }
    if (output["DefaultCooldown"] !== undefined) {
        contents.DefaultCooldown = (0, smithy_client_1.strictParseInt32)(output["DefaultCooldown"]);
    }
    if (output.AvailabilityZones === "") {
        contents.AvailabilityZones = [];
    }
    else if (output["AvailabilityZones"] !== undefined && output["AvailabilityZones"]["member"] !== undefined) {
        contents.AvailabilityZones = deserializeAws_queryAvailabilityZones((0, smithy_client_1.getArrayIfSingleItem)(output["AvailabilityZones"]["member"]), context);
    }
    if (output.LoadBalancerNames === "") {
        contents.LoadBalancerNames = [];
    }
    else if (output["LoadBalancerNames"] !== undefined && output["LoadBalancerNames"]["member"] !== undefined) {
        contents.LoadBalancerNames = deserializeAws_queryLoadBalancerNames((0, smithy_client_1.getArrayIfSingleItem)(output["LoadBalancerNames"]["member"]), context);
    }
    if (output.TargetGroupARNs === "") {
        contents.TargetGroupARNs = [];
    }
    else if (output["TargetGroupARNs"] !== undefined && output["TargetGroupARNs"]["member"] !== undefined) {
        contents.TargetGroupARNs = deserializeAws_queryTargetGroupARNs((0, smithy_client_1.getArrayIfSingleItem)(output["TargetGroupARNs"]["member"]), context);
    }
    if (output["HealthCheckType"] !== undefined) {
        contents.HealthCheckType = (0, smithy_client_1.expectString)(output["HealthCheckType"]);
    }
    if (output["HealthCheckGracePeriod"] !== undefined) {
        contents.HealthCheckGracePeriod = (0, smithy_client_1.strictParseInt32)(output["HealthCheckGracePeriod"]);
    }
    if (output.Instances === "") {
        contents.Instances = [];
    }
    else if (output["Instances"] !== undefined && output["Instances"]["member"] !== undefined) {
        contents.Instances = deserializeAws_queryInstances((0, smithy_client_1.getArrayIfSingleItem)(output["Instances"]["member"]), context);
    }
    if (output["CreatedTime"] !== undefined) {
        contents.CreatedTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["CreatedTime"]));
    }
    if (output.SuspendedProcesses === "") {
        contents.SuspendedProcesses = [];
    }
    else if (output["SuspendedProcesses"] !== undefined && output["SuspendedProcesses"]["member"] !== undefined) {
        contents.SuspendedProcesses = deserializeAws_querySuspendedProcesses((0, smithy_client_1.getArrayIfSingleItem)(output["SuspendedProcesses"]["member"]), context);
    }
    if (output["PlacementGroup"] !== undefined) {
        contents.PlacementGroup = (0, smithy_client_1.expectString)(output["PlacementGroup"]);
    }
    if (output["VPCZoneIdentifier"] !== undefined) {
        contents.VPCZoneIdentifier = (0, smithy_client_1.expectString)(output["VPCZoneIdentifier"]);
    }
    if (output.EnabledMetrics === "") {
        contents.EnabledMetrics = [];
    }
    else if (output["EnabledMetrics"] !== undefined && output["EnabledMetrics"]["member"] !== undefined) {
        contents.EnabledMetrics = deserializeAws_queryEnabledMetrics((0, smithy_client_1.getArrayIfSingleItem)(output["EnabledMetrics"]["member"]), context);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output.Tags === "") {
        contents.Tags = [];
    }
    else if (output["Tags"] !== undefined && output["Tags"]["member"] !== undefined) {
        contents.Tags = deserializeAws_queryTagDescriptionList((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["member"]), context);
    }
    if (output.TerminationPolicies === "") {
        contents.TerminationPolicies = [];
    }
    else if (output["TerminationPolicies"] !== undefined && output["TerminationPolicies"]["member"] !== undefined) {
        contents.TerminationPolicies = deserializeAws_queryTerminationPolicies((0, smithy_client_1.getArrayIfSingleItem)(output["TerminationPolicies"]["member"]), context);
    }
    if (output["NewInstancesProtectedFromScaleIn"] !== undefined) {
        contents.NewInstancesProtectedFromScaleIn = (0, smithy_client_1.parseBoolean)(output["NewInstancesProtectedFromScaleIn"]);
    }
    if (output["ServiceLinkedRoleARN"] !== undefined) {
        contents.ServiceLinkedRoleARN = (0, smithy_client_1.expectString)(output["ServiceLinkedRoleARN"]);
    }
    if (output["MaxInstanceLifetime"] !== undefined) {
        contents.MaxInstanceLifetime = (0, smithy_client_1.strictParseInt32)(output["MaxInstanceLifetime"]);
    }
    if (output["CapacityRebalance"] !== undefined) {
        contents.CapacityRebalance = (0, smithy_client_1.parseBoolean)(output["CapacityRebalance"]);
    }
    if (output["WarmPoolConfiguration"] !== undefined) {
        contents.WarmPoolConfiguration = deserializeAws_queryWarmPoolConfiguration(output["WarmPoolConfiguration"], context);
    }
    if (output["WarmPoolSize"] !== undefined) {
        contents.WarmPoolSize = (0, smithy_client_1.strictParseInt32)(output["WarmPoolSize"]);
    }
    if (output["Context"] !== undefined) {
        contents.Context = (0, smithy_client_1.expectString)(output["Context"]);
    }
    if (output["DesiredCapacityType"] !== undefined) {
        contents.DesiredCapacityType = (0, smithy_client_1.expectString)(output["DesiredCapacityType"]);
    }
    if (output["DefaultInstanceWarmup"] !== undefined) {
        contents.DefaultInstanceWarmup = (0, smithy_client_1.strictParseInt32)(output["DefaultInstanceWarmup"]);
    }
    return contents;
};
const deserializeAws_queryAutoScalingGroups = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryAutoScalingGroup(entry, context);
    });
};
const deserializeAws_queryAutoScalingGroupsType = (output, context) => {
    const contents = {
        AutoScalingGroups: undefined,
        NextToken: undefined,
    };
    if (output.AutoScalingGroups === "") {
        contents.AutoScalingGroups = [];
    }
    else if (output["AutoScalingGroups"] !== undefined && output["AutoScalingGroups"]["member"] !== undefined) {
        contents.AutoScalingGroups = deserializeAws_queryAutoScalingGroups((0, smithy_client_1.getArrayIfSingleItem)(output["AutoScalingGroups"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryAutoScalingInstanceDetails = (output, context) => {
    const contents = {
        InstanceId: undefined,
        InstanceType: undefined,
        AutoScalingGroupName: undefined,
        AvailabilityZone: undefined,
        LifecycleState: undefined,
        HealthStatus: undefined,
        LaunchConfigurationName: undefined,
        LaunchTemplate: undefined,
        ProtectedFromScaleIn: undefined,
        WeightedCapacity: undefined,
    };
    if (output["InstanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["InstanceId"]);
    }
    if (output["InstanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["InstanceType"]);
    }
    if (output["AutoScalingGroupName"] !== undefined) {
        contents.AutoScalingGroupName = (0, smithy_client_1.expectString)(output["AutoScalingGroupName"]);
    }
    if (output["AvailabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["AvailabilityZone"]);
    }
    if (output["LifecycleState"] !== undefined) {
        contents.LifecycleState = (0, smithy_client_1.expectString)(output["LifecycleState"]);
    }
    if (output["HealthStatus"] !== undefined) {
        contents.HealthStatus = (0, smithy_client_1.expectString)(output["HealthStatus"]);
    }
    if (output["LaunchConfigurationName"] !== undefined) {
        contents.LaunchConfigurationName = (0, smithy_client_1.expectString)(output["LaunchConfigurationName"]);
    }
    if (output["LaunchTemplate"] !== undefined) {
        contents.LaunchTemplate = deserializeAws_queryLaunchTemplateSpecification(output["LaunchTemplate"], context);
    }
    if (output["ProtectedFromScaleIn"] !== undefined) {
        contents.ProtectedFromScaleIn = (0, smithy_client_1.parseBoolean)(output["ProtectedFromScaleIn"]);
    }
    if (output["WeightedCapacity"] !== undefined) {
        contents.WeightedCapacity = (0, smithy_client_1.expectString)(output["WeightedCapacity"]);
    }
    return contents;
};
const deserializeAws_queryAutoScalingInstances = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryAutoScalingInstanceDetails(entry, context);
    });
};
const deserializeAws_queryAutoScalingInstancesType = (output, context) => {
    const contents = {
        AutoScalingInstances: undefined,
        NextToken: undefined,
    };
    if (output.AutoScalingInstances === "") {
        contents.AutoScalingInstances = [];
    }
    else if (output["AutoScalingInstances"] !== undefined && output["AutoScalingInstances"]["member"] !== undefined) {
        contents.AutoScalingInstances = deserializeAws_queryAutoScalingInstances((0, smithy_client_1.getArrayIfSingleItem)(output["AutoScalingInstances"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryAutoScalingNotificationTypes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_queryAvailabilityZones = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_queryBaselineEbsBandwidthMbpsRequest = (output, context) => {
    const contents = {
        Min: undefined,
        Max: undefined,
    };
    if (output["Min"] !== undefined) {
        contents.Min = (0, smithy_client_1.strictParseInt32)(output["Min"]);
    }
    if (output["Max"] !== undefined) {
        contents.Max = (0, smithy_client_1.strictParseInt32)(output["Max"]);
    }
    return contents;
};
const deserializeAws_queryBatchDeleteScheduledActionAnswer = (output, context) => {
    const contents = {
        FailedScheduledActions: undefined,
    };
    if (output.FailedScheduledActions === "") {
        contents.FailedScheduledActions = [];
    }
    else if (output["FailedScheduledActions"] !== undefined &&
        output["FailedScheduledActions"]["member"] !== undefined) {
        contents.FailedScheduledActions = deserializeAws_queryFailedScheduledUpdateGroupActionRequests((0, smithy_client_1.getArrayIfSingleItem)(output["FailedScheduledActions"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryBatchPutScheduledUpdateGroupActionAnswer = (output, context) => {
    const contents = {
        FailedScheduledUpdateGroupActions: undefined,
    };
    if (output.FailedScheduledUpdateGroupActions === "") {
        contents.FailedScheduledUpdateGroupActions = [];
    }
    else if (output["FailedScheduledUpdateGroupActions"] !== undefined &&
        output["FailedScheduledUpdateGroupActions"]["member"] !== undefined) {
        contents.FailedScheduledUpdateGroupActions = deserializeAws_queryFailedScheduledUpdateGroupActionRequests((0, smithy_client_1.getArrayIfSingleItem)(output["FailedScheduledUpdateGroupActions"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryBlockDeviceMapping = (output, context) => {
    const contents = {
        VirtualName: undefined,
        DeviceName: undefined,
        Ebs: undefined,
        NoDevice: undefined,
    };
    if (output["VirtualName"] !== undefined) {
        contents.VirtualName = (0, smithy_client_1.expectString)(output["VirtualName"]);
    }
    if (output["DeviceName"] !== undefined) {
        contents.DeviceName = (0, smithy_client_1.expectString)(output["DeviceName"]);
    }
    if (output["Ebs"] !== undefined) {
        contents.Ebs = deserializeAws_queryEbs(output["Ebs"], context);
    }
    if (output["NoDevice"] !== undefined) {
        contents.NoDevice = (0, smithy_client_1.parseBoolean)(output["NoDevice"]);
    }
    return contents;
};
const deserializeAws_queryBlockDeviceMappings = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryBlockDeviceMapping(entry, context);
    });
};
const deserializeAws_queryCancelInstanceRefreshAnswer = (output, context) => {
    const contents = {
        InstanceRefreshId: undefined,
    };
    if (output["InstanceRefreshId"] !== undefined) {
        contents.InstanceRefreshId = (0, smithy_client_1.expectString)(output["InstanceRefreshId"]);
    }
    return contents;
};
const deserializeAws_queryCapacityForecast = (output, context) => {
    const contents = {
        Timestamps: undefined,
        Values: undefined,
    };
    if (output.Timestamps === "") {
        contents.Timestamps = [];
    }
    else if (output["Timestamps"] !== undefined && output["Timestamps"]["member"] !== undefined) {
        contents.Timestamps = deserializeAws_queryPredictiveScalingForecastTimestamps((0, smithy_client_1.getArrayIfSingleItem)(output["Timestamps"]["member"]), context);
    }
    if (output.Values === "") {
        contents.Values = [];
    }
    else if (output["Values"] !== undefined && output["Values"]["member"] !== undefined) {
        contents.Values = deserializeAws_queryPredictiveScalingForecastValues((0, smithy_client_1.getArrayIfSingleItem)(output["Values"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryCheckpointPercentages = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.strictParseInt32)(entry);
    });
};
const deserializeAws_queryClassicLinkVPCSecurityGroups = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_queryCompleteLifecycleActionAnswer = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryCpuManufacturers = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_queryCustomizedMetricSpecification = (output, context) => {
    const contents = {
        MetricName: undefined,
        Namespace: undefined,
        Dimensions: undefined,
        Statistic: undefined,
        Unit: undefined,
    };
    if (output["MetricName"] !== undefined) {
        contents.MetricName = (0, smithy_client_1.expectString)(output["MetricName"]);
    }
    if (output["Namespace"] !== undefined) {
        contents.Namespace = (0, smithy_client_1.expectString)(output["Namespace"]);
    }
    if (output.Dimensions === "") {
        contents.Dimensions = [];
    }
    else if (output["Dimensions"] !== undefined && output["Dimensions"]["member"] !== undefined) {
        contents.Dimensions = deserializeAws_queryMetricDimensions((0, smithy_client_1.getArrayIfSingleItem)(output["Dimensions"]["member"]), context);
    }
    if (output["Statistic"] !== undefined) {
        contents.Statistic = (0, smithy_client_1.expectString)(output["Statistic"]);
    }
    if (output["Unit"] !== undefined) {
        contents.Unit = (0, smithy_client_1.expectString)(output["Unit"]);
    }
    return contents;
};
const deserializeAws_queryDeleteLifecycleHookAnswer = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryDeleteWarmPoolAnswer = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryDescribeAccountLimitsAnswer = (output, context) => {
    const contents = {
        MaxNumberOfAutoScalingGroups: undefined,
        MaxNumberOfLaunchConfigurations: undefined,
        NumberOfAutoScalingGroups: undefined,
        NumberOfLaunchConfigurations: undefined,
    };
    if (output["MaxNumberOfAutoScalingGroups"] !== undefined) {
        contents.MaxNumberOfAutoScalingGroups = (0, smithy_client_1.strictParseInt32)(output["MaxNumberOfAutoScalingGroups"]);
    }
    if (output["MaxNumberOfLaunchConfigurations"] !== undefined) {
        contents.MaxNumberOfLaunchConfigurations = (0, smithy_client_1.strictParseInt32)(output["MaxNumberOfLaunchConfigurations"]);
    }
    if (output["NumberOfAutoScalingGroups"] !== undefined) {
        contents.NumberOfAutoScalingGroups = (0, smithy_client_1.strictParseInt32)(output["NumberOfAutoScalingGroups"]);
    }
    if (output["NumberOfLaunchConfigurations"] !== undefined) {
        contents.NumberOfLaunchConfigurations = (0, smithy_client_1.strictParseInt32)(output["NumberOfLaunchConfigurations"]);
    }
    return contents;
};
const deserializeAws_queryDescribeAdjustmentTypesAnswer = (output, context) => {
    const contents = {
        AdjustmentTypes: undefined,
    };
    if (output.AdjustmentTypes === "") {
        contents.AdjustmentTypes = [];
    }
    else if (output["AdjustmentTypes"] !== undefined && output["AdjustmentTypes"]["member"] !== undefined) {
        contents.AdjustmentTypes = deserializeAws_queryAdjustmentTypes((0, smithy_client_1.getArrayIfSingleItem)(output["AdjustmentTypes"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryDescribeAutoScalingNotificationTypesAnswer = (output, context) => {
    const contents = {
        AutoScalingNotificationTypes: undefined,
    };
    if (output.AutoScalingNotificationTypes === "") {
        contents.AutoScalingNotificationTypes = [];
    }
    else if (output["AutoScalingNotificationTypes"] !== undefined &&
        output["AutoScalingNotificationTypes"]["member"] !== undefined) {
        contents.AutoScalingNotificationTypes = deserializeAws_queryAutoScalingNotificationTypes((0, smithy_client_1.getArrayIfSingleItem)(output["AutoScalingNotificationTypes"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryDescribeInstanceRefreshesAnswer = (output, context) => {
    const contents = {
        InstanceRefreshes: undefined,
        NextToken: undefined,
    };
    if (output.InstanceRefreshes === "") {
        contents.InstanceRefreshes = [];
    }
    else if (output["InstanceRefreshes"] !== undefined && output["InstanceRefreshes"]["member"] !== undefined) {
        contents.InstanceRefreshes = deserializeAws_queryInstanceRefreshes((0, smithy_client_1.getArrayIfSingleItem)(output["InstanceRefreshes"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryDescribeLifecycleHooksAnswer = (output, context) => {
    const contents = {
        LifecycleHooks: undefined,
    };
    if (output.LifecycleHooks === "") {
        contents.LifecycleHooks = [];
    }
    else if (output["LifecycleHooks"] !== undefined && output["LifecycleHooks"]["member"] !== undefined) {
        contents.LifecycleHooks = deserializeAws_queryLifecycleHooks((0, smithy_client_1.getArrayIfSingleItem)(output["LifecycleHooks"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryDescribeLifecycleHookTypesAnswer = (output, context) => {
    const contents = {
        LifecycleHookTypes: undefined,
    };
    if (output.LifecycleHookTypes === "") {
        contents.LifecycleHookTypes = [];
    }
    else if (output["LifecycleHookTypes"] !== undefined && output["LifecycleHookTypes"]["member"] !== undefined) {
        contents.LifecycleHookTypes = deserializeAws_queryAutoScalingNotificationTypes((0, smithy_client_1.getArrayIfSingleItem)(output["LifecycleHookTypes"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryDescribeLoadBalancersResponse = (output, context) => {
    const contents = {
        LoadBalancers: undefined,
        NextToken: undefined,
    };
    if (output.LoadBalancers === "") {
        contents.LoadBalancers = [];
    }
    else if (output["LoadBalancers"] !== undefined && output["LoadBalancers"]["member"] !== undefined) {
        contents.LoadBalancers = deserializeAws_queryLoadBalancerStates((0, smithy_client_1.getArrayIfSingleItem)(output["LoadBalancers"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryDescribeLoadBalancerTargetGroupsResponse = (output, context) => {
    const contents = {
        LoadBalancerTargetGroups: undefined,
        NextToken: undefined,
    };
    if (output.LoadBalancerTargetGroups === "") {
        contents.LoadBalancerTargetGroups = [];
    }
    else if (output["LoadBalancerTargetGroups"] !== undefined &&
        output["LoadBalancerTargetGroups"]["member"] !== undefined) {
        contents.LoadBalancerTargetGroups = deserializeAws_queryLoadBalancerTargetGroupStates((0, smithy_client_1.getArrayIfSingleItem)(output["LoadBalancerTargetGroups"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryDescribeMetricCollectionTypesAnswer = (output, context) => {
    const contents = {
        Metrics: undefined,
        Granularities: undefined,
    };
    if (output.Metrics === "") {
        contents.Metrics = [];
    }
    else if (output["Metrics"] !== undefined && output["Metrics"]["member"] !== undefined) {
        contents.Metrics = deserializeAws_queryMetricCollectionTypes((0, smithy_client_1.getArrayIfSingleItem)(output["Metrics"]["member"]), context);
    }
    if (output.Granularities === "") {
        contents.Granularities = [];
    }
    else if (output["Granularities"] !== undefined && output["Granularities"]["member"] !== undefined) {
        contents.Granularities = deserializeAws_queryMetricGranularityTypes((0, smithy_client_1.getArrayIfSingleItem)(output["Granularities"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryDescribeNotificationConfigurationsAnswer = (output, context) => {
    const contents = {
        NotificationConfigurations: undefined,
        NextToken: undefined,
    };
    if (output.NotificationConfigurations === "") {
        contents.NotificationConfigurations = [];
    }
    else if (output["NotificationConfigurations"] !== undefined &&
        output["NotificationConfigurations"]["member"] !== undefined) {
        contents.NotificationConfigurations = deserializeAws_queryNotificationConfigurations((0, smithy_client_1.getArrayIfSingleItem)(output["NotificationConfigurations"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryDescribeTerminationPolicyTypesAnswer = (output, context) => {
    const contents = {
        TerminationPolicyTypes: undefined,
    };
    if (output.TerminationPolicyTypes === "") {
        contents.TerminationPolicyTypes = [];
    }
    else if (output["TerminationPolicyTypes"] !== undefined &&
        output["TerminationPolicyTypes"]["member"] !== undefined) {
        contents.TerminationPolicyTypes = deserializeAws_queryTerminationPolicies((0, smithy_client_1.getArrayIfSingleItem)(output["TerminationPolicyTypes"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryDescribeWarmPoolAnswer = (output, context) => {
    const contents = {
        WarmPoolConfiguration: undefined,
        Instances: undefined,
        NextToken: undefined,
    };
    if (output["WarmPoolConfiguration"] !== undefined) {
        contents.WarmPoolConfiguration = deserializeAws_queryWarmPoolConfiguration(output["WarmPoolConfiguration"], context);
    }
    if (output.Instances === "") {
        contents.Instances = [];
    }
    else if (output["Instances"] !== undefined && output["Instances"]["member"] !== undefined) {
        contents.Instances = deserializeAws_queryInstances((0, smithy_client_1.getArrayIfSingleItem)(output["Instances"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryDesiredConfiguration = (output, context) => {
    const contents = {
        LaunchTemplate: undefined,
        MixedInstancesPolicy: undefined,
    };
    if (output["LaunchTemplate"] !== undefined) {
        contents.LaunchTemplate = deserializeAws_queryLaunchTemplateSpecification(output["LaunchTemplate"], context);
    }
    if (output["MixedInstancesPolicy"] !== undefined) {
        contents.MixedInstancesPolicy = deserializeAws_queryMixedInstancesPolicy(output["MixedInstancesPolicy"], context);
    }
    return contents;
};
const deserializeAws_queryDetachInstancesAnswer = (output, context) => {
    const contents = {
        Activities: undefined,
    };
    if (output.Activities === "") {
        contents.Activities = [];
    }
    else if (output["Activities"] !== undefined && output["Activities"]["member"] !== undefined) {
        contents.Activities = deserializeAws_queryActivities((0, smithy_client_1.getArrayIfSingleItem)(output["Activities"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryDetachLoadBalancersResultType = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryDetachLoadBalancerTargetGroupsResultType = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryEbs = (output, context) => {
    const contents = {
        SnapshotId: undefined,
        VolumeSize: undefined,
        VolumeType: undefined,
        DeleteOnTermination: undefined,
        Iops: undefined,
        Encrypted: undefined,
        Throughput: undefined,
    };
    if (output["SnapshotId"] !== undefined) {
        contents.SnapshotId = (0, smithy_client_1.expectString)(output["SnapshotId"]);
    }
    if (output["VolumeSize"] !== undefined) {
        contents.VolumeSize = (0, smithy_client_1.strictParseInt32)(output["VolumeSize"]);
    }
    if (output["VolumeType"] !== undefined) {
        contents.VolumeType = (0, smithy_client_1.expectString)(output["VolumeType"]);
    }
    if (output["DeleteOnTermination"] !== undefined) {
        contents.DeleteOnTermination = (0, smithy_client_1.parseBoolean)(output["DeleteOnTermination"]);
    }
    if (output["Iops"] !== undefined) {
        contents.Iops = (0, smithy_client_1.strictParseInt32)(output["Iops"]);
    }
    if (output["Encrypted"] !== undefined) {
        contents.Encrypted = (0, smithy_client_1.parseBoolean)(output["Encrypted"]);
    }
    if (output["Throughput"] !== undefined) {
        contents.Throughput = (0, smithy_client_1.strictParseInt32)(output["Throughput"]);
    }
    return contents;
};
const deserializeAws_queryEnabledMetric = (output, context) => {
    const contents = {
        Metric: undefined,
        Granularity: undefined,
    };
    if (output["Metric"] !== undefined) {
        contents.Metric = (0, smithy_client_1.expectString)(output["Metric"]);
    }
    if (output["Granularity"] !== undefined) {
        contents.Granularity = (0, smithy_client_1.expectString)(output["Granularity"]);
    }
    return contents;
};
const deserializeAws_queryEnabledMetrics = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryEnabledMetric(entry, context);
    });
};
const deserializeAws_queryEnterStandbyAnswer = (output, context) => {
    const contents = {
        Activities: undefined,
    };
    if (output.Activities === "") {
        contents.Activities = [];
    }
    else if (output["Activities"] !== undefined && output["Activities"]["member"] !== undefined) {
        contents.Activities = deserializeAws_queryActivities((0, smithy_client_1.getArrayIfSingleItem)(output["Activities"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryExcludedInstanceTypes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_queryExitStandbyAnswer = (output, context) => {
    const contents = {
        Activities: undefined,
    };
    if (output.Activities === "") {
        contents.Activities = [];
    }
    else if (output["Activities"] !== undefined && output["Activities"]["member"] !== undefined) {
        contents.Activities = deserializeAws_queryActivities((0, smithy_client_1.getArrayIfSingleItem)(output["Activities"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryFailedScheduledUpdateGroupActionRequest = (output, context) => {
    const contents = {
        ScheduledActionName: undefined,
        ErrorCode: undefined,
        ErrorMessage: undefined,
    };
    if (output["ScheduledActionName"] !== undefined) {
        contents.ScheduledActionName = (0, smithy_client_1.expectString)(output["ScheduledActionName"]);
    }
    if (output["ErrorCode"] !== undefined) {
        contents.ErrorCode = (0, smithy_client_1.expectString)(output["ErrorCode"]);
    }
    if (output["ErrorMessage"] !== undefined) {
        contents.ErrorMessage = (0, smithy_client_1.expectString)(output["ErrorMessage"]);
    }
    return contents;
};
const deserializeAws_queryFailedScheduledUpdateGroupActionRequests = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryFailedScheduledUpdateGroupActionRequest(entry, context);
    });
};
const deserializeAws_queryGetPredictiveScalingForecastAnswer = (output, context) => {
    const contents = {
        LoadForecast: undefined,
        CapacityForecast: undefined,
        UpdateTime: undefined,
    };
    if (output.LoadForecast === "") {
        contents.LoadForecast = [];
    }
    else if (output["LoadForecast"] !== undefined && output["LoadForecast"]["member"] !== undefined) {
        contents.LoadForecast = deserializeAws_queryLoadForecasts((0, smithy_client_1.getArrayIfSingleItem)(output["LoadForecast"]["member"]), context);
    }
    if (output["CapacityForecast"] !== undefined) {
        contents.CapacityForecast = deserializeAws_queryCapacityForecast(output["CapacityForecast"], context);
    }
    if (output["UpdateTime"] !== undefined) {
        contents.UpdateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["UpdateTime"]));
    }
    return contents;
};
const deserializeAws_queryInstance = (output, context) => {
    const contents = {
        InstanceId: undefined,
        InstanceType: undefined,
        AvailabilityZone: undefined,
        LifecycleState: undefined,
        HealthStatus: undefined,
        LaunchConfigurationName: undefined,
        LaunchTemplate: undefined,
        ProtectedFromScaleIn: undefined,
        WeightedCapacity: undefined,
    };
    if (output["InstanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["InstanceId"]);
    }
    if (output["InstanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["InstanceType"]);
    }
    if (output["AvailabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["AvailabilityZone"]);
    }
    if (output["LifecycleState"] !== undefined) {
        contents.LifecycleState = (0, smithy_client_1.expectString)(output["LifecycleState"]);
    }
    if (output["HealthStatus"] !== undefined) {
        contents.HealthStatus = (0, smithy_client_1.expectString)(output["HealthStatus"]);
    }
    if (output["LaunchConfigurationName"] !== undefined) {
        contents.LaunchConfigurationName = (0, smithy_client_1.expectString)(output["LaunchConfigurationName"]);
    }
    if (output["LaunchTemplate"] !== undefined) {
        contents.LaunchTemplate = deserializeAws_queryLaunchTemplateSpecification(output["LaunchTemplate"], context);
    }
    if (output["ProtectedFromScaleIn"] !== undefined) {
        contents.ProtectedFromScaleIn = (0, smithy_client_1.parseBoolean)(output["ProtectedFromScaleIn"]);
    }
    if (output["WeightedCapacity"] !== undefined) {
        contents.WeightedCapacity = (0, smithy_client_1.expectString)(output["WeightedCapacity"]);
    }
    return contents;
};
const deserializeAws_queryInstanceGenerations = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_queryInstanceMetadataOptions = (output, context) => {
    const contents = {
        HttpTokens: undefined,
        HttpPutResponseHopLimit: undefined,
        HttpEndpoint: undefined,
    };
    if (output["HttpTokens"] !== undefined) {
        contents.HttpTokens = (0, smithy_client_1.expectString)(output["HttpTokens"]);
    }
    if (output["HttpPutResponseHopLimit"] !== undefined) {
        contents.HttpPutResponseHopLimit = (0, smithy_client_1.strictParseInt32)(output["HttpPutResponseHopLimit"]);
    }
    if (output["HttpEndpoint"] !== undefined) {
        contents.HttpEndpoint = (0, smithy_client_1.expectString)(output["HttpEndpoint"]);
    }
    return contents;
};
const deserializeAws_queryInstanceMonitoring = (output, context) => {
    const contents = {
        Enabled: undefined,
    };
    if (output["Enabled"] !== undefined) {
        contents.Enabled = (0, smithy_client_1.parseBoolean)(output["Enabled"]);
    }
    return contents;
};
const deserializeAws_queryInstanceRefresh = (output, context) => {
    const contents = {
        InstanceRefreshId: undefined,
        AutoScalingGroupName: undefined,
        Status: undefined,
        StatusReason: undefined,
        StartTime: undefined,
        EndTime: undefined,
        PercentageComplete: undefined,
        InstancesToUpdate: undefined,
        ProgressDetails: undefined,
        Preferences: undefined,
        DesiredConfiguration: undefined,
    };
    if (output["InstanceRefreshId"] !== undefined) {
        contents.InstanceRefreshId = (0, smithy_client_1.expectString)(output["InstanceRefreshId"]);
    }
    if (output["AutoScalingGroupName"] !== undefined) {
        contents.AutoScalingGroupName = (0, smithy_client_1.expectString)(output["AutoScalingGroupName"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["StatusReason"] !== undefined) {
        contents.StatusReason = (0, smithy_client_1.expectString)(output["StatusReason"]);
    }
    if (output["StartTime"] !== undefined) {
        contents.StartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["StartTime"]));
    }
    if (output["EndTime"] !== undefined) {
        contents.EndTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["EndTime"]));
    }
    if (output["PercentageComplete"] !== undefined) {
        contents.PercentageComplete = (0, smithy_client_1.strictParseInt32)(output["PercentageComplete"]);
    }
    if (output["InstancesToUpdate"] !== undefined) {
        contents.InstancesToUpdate = (0, smithy_client_1.strictParseInt32)(output["InstancesToUpdate"]);
    }
    if (output["ProgressDetails"] !== undefined) {
        contents.ProgressDetails = deserializeAws_queryInstanceRefreshProgressDetails(output["ProgressDetails"], context);
    }
    if (output["Preferences"] !== undefined) {
        contents.Preferences = deserializeAws_queryRefreshPreferences(output["Preferences"], context);
    }
    if (output["DesiredConfiguration"] !== undefined) {
        contents.DesiredConfiguration = deserializeAws_queryDesiredConfiguration(output["DesiredConfiguration"], context);
    }
    return contents;
};
const deserializeAws_queryInstanceRefreshes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryInstanceRefresh(entry, context);
    });
};
const deserializeAws_queryInstanceRefreshInProgressFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInstanceRefreshLivePoolProgress = (output, context) => {
    const contents = {
        PercentageComplete: undefined,
        InstancesToUpdate: undefined,
    };
    if (output["PercentageComplete"] !== undefined) {
        contents.PercentageComplete = (0, smithy_client_1.strictParseInt32)(output["PercentageComplete"]);
    }
    if (output["InstancesToUpdate"] !== undefined) {
        contents.InstancesToUpdate = (0, smithy_client_1.strictParseInt32)(output["InstancesToUpdate"]);
    }
    return contents;
};
const deserializeAws_queryInstanceRefreshProgressDetails = (output, context) => {
    const contents = {
        LivePoolProgress: undefined,
        WarmPoolProgress: undefined,
    };
    if (output["LivePoolProgress"] !== undefined) {
        contents.LivePoolProgress = deserializeAws_queryInstanceRefreshLivePoolProgress(output["LivePoolProgress"], context);
    }
    if (output["WarmPoolProgress"] !== undefined) {
        contents.WarmPoolProgress = deserializeAws_queryInstanceRefreshWarmPoolProgress(output["WarmPoolProgress"], context);
    }
    return contents;
};
const deserializeAws_queryInstanceRefreshWarmPoolProgress = (output, context) => {
    const contents = {
        PercentageComplete: undefined,
        InstancesToUpdate: undefined,
    };
    if (output["PercentageComplete"] !== undefined) {
        contents.PercentageComplete = (0, smithy_client_1.strictParseInt32)(output["PercentageComplete"]);
    }
    if (output["InstancesToUpdate"] !== undefined) {
        contents.InstancesToUpdate = (0, smithy_client_1.strictParseInt32)(output["InstancesToUpdate"]);
    }
    return contents;
};
const deserializeAws_queryInstanceRequirements = (output, context) => {
    const contents = {
        VCpuCount: undefined,
        MemoryMiB: undefined,
        CpuManufacturers: undefined,
        MemoryGiBPerVCpu: undefined,
        ExcludedInstanceTypes: undefined,
        InstanceGenerations: undefined,
        SpotMaxPricePercentageOverLowestPrice: undefined,
        OnDemandMaxPricePercentageOverLowestPrice: undefined,
        BareMetal: undefined,
        BurstablePerformance: undefined,
        RequireHibernateSupport: undefined,
        NetworkInterfaceCount: undefined,
        LocalStorage: undefined,
        LocalStorageTypes: undefined,
        TotalLocalStorageGB: undefined,
        BaselineEbsBandwidthMbps: undefined,
        AcceleratorTypes: undefined,
        AcceleratorCount: undefined,
        AcceleratorManufacturers: undefined,
        AcceleratorNames: undefined,
        AcceleratorTotalMemoryMiB: undefined,
        NetworkBandwidthGbps: undefined,
        AllowedInstanceTypes: undefined,
    };
    if (output["VCpuCount"] !== undefined) {
        contents.VCpuCount = deserializeAws_queryVCpuCountRequest(output["VCpuCount"], context);
    }
    if (output["MemoryMiB"] !== undefined) {
        contents.MemoryMiB = deserializeAws_queryMemoryMiBRequest(output["MemoryMiB"], context);
    }
    if (output.CpuManufacturers === "") {
        contents.CpuManufacturers = [];
    }
    else if (output["CpuManufacturers"] !== undefined && output["CpuManufacturers"]["member"] !== undefined) {
        contents.CpuManufacturers = deserializeAws_queryCpuManufacturers((0, smithy_client_1.getArrayIfSingleItem)(output["CpuManufacturers"]["member"]), context);
    }
    if (output["MemoryGiBPerVCpu"] !== undefined) {
        contents.MemoryGiBPerVCpu = deserializeAws_queryMemoryGiBPerVCpuRequest(output["MemoryGiBPerVCpu"], context);
    }
    if (output.ExcludedInstanceTypes === "") {
        contents.ExcludedInstanceTypes = [];
    }
    else if (output["ExcludedInstanceTypes"] !== undefined && output["ExcludedInstanceTypes"]["member"] !== undefined) {
        contents.ExcludedInstanceTypes = deserializeAws_queryExcludedInstanceTypes((0, smithy_client_1.getArrayIfSingleItem)(output["ExcludedInstanceTypes"]["member"]), context);
    }
    if (output.InstanceGenerations === "") {
        contents.InstanceGenerations = [];
    }
    else if (output["InstanceGenerations"] !== undefined && output["InstanceGenerations"]["member"] !== undefined) {
        contents.InstanceGenerations = deserializeAws_queryInstanceGenerations((0, smithy_client_1.getArrayIfSingleItem)(output["InstanceGenerations"]["member"]), context);
    }
    if (output["SpotMaxPricePercentageOverLowestPrice"] !== undefined) {
        contents.SpotMaxPricePercentageOverLowestPrice = (0, smithy_client_1.strictParseInt32)(output["SpotMaxPricePercentageOverLowestPrice"]);
    }
    if (output["OnDemandMaxPricePercentageOverLowestPrice"] !== undefined) {
        contents.OnDemandMaxPricePercentageOverLowestPrice = (0, smithy_client_1.strictParseInt32)(output["OnDemandMaxPricePercentageOverLowestPrice"]);
    }
    if (output["BareMetal"] !== undefined) {
        contents.BareMetal = (0, smithy_client_1.expectString)(output["BareMetal"]);
    }
    if (output["BurstablePerformance"] !== undefined) {
        contents.BurstablePerformance = (0, smithy_client_1.expectString)(output["BurstablePerformance"]);
    }
    if (output["RequireHibernateSupport"] !== undefined) {
        contents.RequireHibernateSupport = (0, smithy_client_1.parseBoolean)(output["RequireHibernateSupport"]);
    }
    if (output["NetworkInterfaceCount"] !== undefined) {
        contents.NetworkInterfaceCount = deserializeAws_queryNetworkInterfaceCountRequest(output["NetworkInterfaceCount"], context);
    }
    if (output["LocalStorage"] !== undefined) {
        contents.LocalStorage = (0, smithy_client_1.expectString)(output["LocalStorage"]);
    }
    if (output.LocalStorageTypes === "") {
        contents.LocalStorageTypes = [];
    }
    else if (output["LocalStorageTypes"] !== undefined && output["LocalStorageTypes"]["member"] !== undefined) {
        contents.LocalStorageTypes = deserializeAws_queryLocalStorageTypes((0, smithy_client_1.getArrayIfSingleItem)(output["LocalStorageTypes"]["member"]), context);
    }
    if (output["TotalLocalStorageGB"] !== undefined) {
        contents.TotalLocalStorageGB = deserializeAws_queryTotalLocalStorageGBRequest(output["TotalLocalStorageGB"], context);
    }
    if (output["BaselineEbsBandwidthMbps"] !== undefined) {
        contents.BaselineEbsBandwidthMbps = deserializeAws_queryBaselineEbsBandwidthMbpsRequest(output["BaselineEbsBandwidthMbps"], context);
    }
    if (output.AcceleratorTypes === "") {
        contents.AcceleratorTypes = [];
    }
    else if (output["AcceleratorTypes"] !== undefined && output["AcceleratorTypes"]["member"] !== undefined) {
        contents.AcceleratorTypes = deserializeAws_queryAcceleratorTypes((0, smithy_client_1.getArrayIfSingleItem)(output["AcceleratorTypes"]["member"]), context);
    }
    if (output["AcceleratorCount"] !== undefined) {
        contents.AcceleratorCount = deserializeAws_queryAcceleratorCountRequest(output["AcceleratorCount"], context);
    }
    if (output.AcceleratorManufacturers === "") {
        contents.AcceleratorManufacturers = [];
    }
    else if (output["AcceleratorManufacturers"] !== undefined &&
        output["AcceleratorManufacturers"]["member"] !== undefined) {
        contents.AcceleratorManufacturers = deserializeAws_queryAcceleratorManufacturers((0, smithy_client_1.getArrayIfSingleItem)(output["AcceleratorManufacturers"]["member"]), context);
    }
    if (output.AcceleratorNames === "") {
        contents.AcceleratorNames = [];
    }
    else if (output["AcceleratorNames"] !== undefined && output["AcceleratorNames"]["member"] !== undefined) {
        contents.AcceleratorNames = deserializeAws_queryAcceleratorNames((0, smithy_client_1.getArrayIfSingleItem)(output["AcceleratorNames"]["member"]), context);
    }
    if (output["AcceleratorTotalMemoryMiB"] !== undefined) {
        contents.AcceleratorTotalMemoryMiB = deserializeAws_queryAcceleratorTotalMemoryMiBRequest(output["AcceleratorTotalMemoryMiB"], context);
    }
    if (output["NetworkBandwidthGbps"] !== undefined) {
        contents.NetworkBandwidthGbps = deserializeAws_queryNetworkBandwidthGbpsRequest(output["NetworkBandwidthGbps"], context);
    }
    if (output.AllowedInstanceTypes === "") {
        contents.AllowedInstanceTypes = [];
    }
    else if (output["AllowedInstanceTypes"] !== undefined && output["AllowedInstanceTypes"]["member"] !== undefined) {
        contents.AllowedInstanceTypes = deserializeAws_queryAllowedInstanceTypes((0, smithy_client_1.getArrayIfSingleItem)(output["AllowedInstanceTypes"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryInstanceReusePolicy = (output, context) => {
    const contents = {
        ReuseOnScaleIn: undefined,
    };
    if (output["ReuseOnScaleIn"] !== undefined) {
        contents.ReuseOnScaleIn = (0, smithy_client_1.parseBoolean)(output["ReuseOnScaleIn"]);
    }
    return contents;
};
const deserializeAws_queryInstances = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryInstance(entry, context);
    });
};
const deserializeAws_queryInstancesDistribution = (output, context) => {
    const contents = {
        OnDemandAllocationStrategy: undefined,
        OnDemandBaseCapacity: undefined,
        OnDemandPercentageAboveBaseCapacity: undefined,
        SpotAllocationStrategy: undefined,
        SpotInstancePools: undefined,
        SpotMaxPrice: undefined,
    };
    if (output["OnDemandAllocationStrategy"] !== undefined) {
        contents.OnDemandAllocationStrategy = (0, smithy_client_1.expectString)(output["OnDemandAllocationStrategy"]);
    }
    if (output["OnDemandBaseCapacity"] !== undefined) {
        contents.OnDemandBaseCapacity = (0, smithy_client_1.strictParseInt32)(output["OnDemandBaseCapacity"]);
    }
    if (output["OnDemandPercentageAboveBaseCapacity"] !== undefined) {
        contents.OnDemandPercentageAboveBaseCapacity = (0, smithy_client_1.strictParseInt32)(output["OnDemandPercentageAboveBaseCapacity"]);
    }
    if (output["SpotAllocationStrategy"] !== undefined) {
        contents.SpotAllocationStrategy = (0, smithy_client_1.expectString)(output["SpotAllocationStrategy"]);
    }
    if (output["SpotInstancePools"] !== undefined) {
        contents.SpotInstancePools = (0, smithy_client_1.strictParseInt32)(output["SpotInstancePools"]);
    }
    if (output["SpotMaxPrice"] !== undefined) {
        contents.SpotMaxPrice = (0, smithy_client_1.expectString)(output["SpotMaxPrice"]);
    }
    return contents;
};
const deserializeAws_queryInvalidNextToken = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryLaunchConfiguration = (output, context) => {
    const contents = {
        LaunchConfigurationName: undefined,
        LaunchConfigurationARN: undefined,
        ImageId: undefined,
        KeyName: undefined,
        SecurityGroups: undefined,
        ClassicLinkVPCId: undefined,
        ClassicLinkVPCSecurityGroups: undefined,
        UserData: undefined,
        InstanceType: undefined,
        KernelId: undefined,
        RamdiskId: undefined,
        BlockDeviceMappings: undefined,
        InstanceMonitoring: undefined,
        SpotPrice: undefined,
        IamInstanceProfile: undefined,
        CreatedTime: undefined,
        EbsOptimized: undefined,
        AssociatePublicIpAddress: undefined,
        PlacementTenancy: undefined,
        MetadataOptions: undefined,
    };
    if (output["LaunchConfigurationName"] !== undefined) {
        contents.LaunchConfigurationName = (0, smithy_client_1.expectString)(output["LaunchConfigurationName"]);
    }
    if (output["LaunchConfigurationARN"] !== undefined) {
        contents.LaunchConfigurationARN = (0, smithy_client_1.expectString)(output["LaunchConfigurationARN"]);
    }
    if (output["ImageId"] !== undefined) {
        contents.ImageId = (0, smithy_client_1.expectString)(output["ImageId"]);
    }
    if (output["KeyName"] !== undefined) {
        contents.KeyName = (0, smithy_client_1.expectString)(output["KeyName"]);
    }
    if (output.SecurityGroups === "") {
        contents.SecurityGroups = [];
    }
    else if (output["SecurityGroups"] !== undefined && output["SecurityGroups"]["member"] !== undefined) {
        contents.SecurityGroups = deserializeAws_querySecurityGroups((0, smithy_client_1.getArrayIfSingleItem)(output["SecurityGroups"]["member"]), context);
    }
    if (output["ClassicLinkVPCId"] !== undefined) {
        contents.ClassicLinkVPCId = (0, smithy_client_1.expectString)(output["ClassicLinkVPCId"]);
    }
    if (output.ClassicLinkVPCSecurityGroups === "") {
        contents.ClassicLinkVPCSecurityGroups = [];
    }
    else if (output["ClassicLinkVPCSecurityGroups"] !== undefined &&
        output["ClassicLinkVPCSecurityGroups"]["member"] !== undefined) {
        contents.ClassicLinkVPCSecurityGroups = deserializeAws_queryClassicLinkVPCSecurityGroups((0, smithy_client_1.getArrayIfSingleItem)(output["ClassicLinkVPCSecurityGroups"]["member"]), context);
    }
    if (output["UserData"] !== undefined) {
        contents.UserData = (0, smithy_client_1.expectString)(output["UserData"]);
    }
    if (output["InstanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["InstanceType"]);
    }
    if (output["KernelId"] !== undefined) {
        contents.KernelId = (0, smithy_client_1.expectString)(output["KernelId"]);
    }
    if (output["RamdiskId"] !== undefined) {
        contents.RamdiskId = (0, smithy_client_1.expectString)(output["RamdiskId"]);
    }
    if (output.BlockDeviceMappings === "") {
        contents.BlockDeviceMappings = [];
    }
    else if (output["BlockDeviceMappings"] !== undefined && output["BlockDeviceMappings"]["member"] !== undefined) {
        contents.BlockDeviceMappings = deserializeAws_queryBlockDeviceMappings((0, smithy_client_1.getArrayIfSingleItem)(output["BlockDeviceMappings"]["member"]), context);
    }
    if (output["InstanceMonitoring"] !== undefined) {
        contents.InstanceMonitoring = deserializeAws_queryInstanceMonitoring(output["InstanceMonitoring"], context);
    }
    if (output["SpotPrice"] !== undefined) {
        contents.SpotPrice = (0, smithy_client_1.expectString)(output["SpotPrice"]);
    }
    if (output["IamInstanceProfile"] !== undefined) {
        contents.IamInstanceProfile = (0, smithy_client_1.expectString)(output["IamInstanceProfile"]);
    }
    if (output["CreatedTime"] !== undefined) {
        contents.CreatedTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["CreatedTime"]));
    }
    if (output["EbsOptimized"] !== undefined) {
        contents.EbsOptimized = (0, smithy_client_1.parseBoolean)(output["EbsOptimized"]);
    }
    if (output["AssociatePublicIpAddress"] !== undefined) {
        contents.AssociatePublicIpAddress = (0, smithy_client_1.parseBoolean)(output["AssociatePublicIpAddress"]);
    }
    if (output["PlacementTenancy"] !== undefined) {
        contents.PlacementTenancy = (0, smithy_client_1.expectString)(output["PlacementTenancy"]);
    }
    if (output["MetadataOptions"] !== undefined) {
        contents.MetadataOptions = deserializeAws_queryInstanceMetadataOptions(output["MetadataOptions"], context);
    }
    return contents;
};
const deserializeAws_queryLaunchConfigurations = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryLaunchConfiguration(entry, context);
    });
};
const deserializeAws_queryLaunchConfigurationsType = (output, context) => {
    const contents = {
        LaunchConfigurations: undefined,
        NextToken: undefined,
    };
    if (output.LaunchConfigurations === "") {
        contents.LaunchConfigurations = [];
    }
    else if (output["LaunchConfigurations"] !== undefined && output["LaunchConfigurations"]["member"] !== undefined) {
        contents.LaunchConfigurations = deserializeAws_queryLaunchConfigurations((0, smithy_client_1.getArrayIfSingleItem)(output["LaunchConfigurations"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryLaunchTemplate = (output, context) => {
    const contents = {
        LaunchTemplateSpecification: undefined,
        Overrides: undefined,
    };
    if (output["LaunchTemplateSpecification"] !== undefined) {
        contents.LaunchTemplateSpecification = deserializeAws_queryLaunchTemplateSpecification(output["LaunchTemplateSpecification"], context);
    }
    if (output.Overrides === "") {
        contents.Overrides = [];
    }
    else if (output["Overrides"] !== undefined && output["Overrides"]["member"] !== undefined) {
        contents.Overrides = deserializeAws_queryOverrides((0, smithy_client_1.getArrayIfSingleItem)(output["Overrides"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryLaunchTemplateOverrides = (output, context) => {
    const contents = {
        InstanceType: undefined,
        WeightedCapacity: undefined,
        LaunchTemplateSpecification: undefined,
        InstanceRequirements: undefined,
    };
    if (output["InstanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["InstanceType"]);
    }
    if (output["WeightedCapacity"] !== undefined) {
        contents.WeightedCapacity = (0, smithy_client_1.expectString)(output["WeightedCapacity"]);
    }
    if (output["LaunchTemplateSpecification"] !== undefined) {
        contents.LaunchTemplateSpecification = deserializeAws_queryLaunchTemplateSpecification(output["LaunchTemplateSpecification"], context);
    }
    if (output["InstanceRequirements"] !== undefined) {
        contents.InstanceRequirements = deserializeAws_queryInstanceRequirements(output["InstanceRequirements"], context);
    }
    return contents;
};
const deserializeAws_queryLaunchTemplateSpecification = (output, context) => {
    const contents = {
        LaunchTemplateId: undefined,
        LaunchTemplateName: undefined,
        Version: undefined,
    };
    if (output["LaunchTemplateId"] !== undefined) {
        contents.LaunchTemplateId = (0, smithy_client_1.expectString)(output["LaunchTemplateId"]);
    }
    if (output["LaunchTemplateName"] !== undefined) {
        contents.LaunchTemplateName = (0, smithy_client_1.expectString)(output["LaunchTemplateName"]);
    }
    if (output["Version"] !== undefined) {
        contents.Version = (0, smithy_client_1.expectString)(output["Version"]);
    }
    return contents;
};
const deserializeAws_queryLifecycleHook = (output, context) => {
    const contents = {
        LifecycleHookName: undefined,
        AutoScalingGroupName: undefined,
        LifecycleTransition: undefined,
        NotificationTargetARN: undefined,
        RoleARN: undefined,
        NotificationMetadata: undefined,
        HeartbeatTimeout: undefined,
        GlobalTimeout: undefined,
        DefaultResult: undefined,
    };
    if (output["LifecycleHookName"] !== undefined) {
        contents.LifecycleHookName = (0, smithy_client_1.expectString)(output["LifecycleHookName"]);
    }
    if (output["AutoScalingGroupName"] !== undefined) {
        contents.AutoScalingGroupName = (0, smithy_client_1.expectString)(output["AutoScalingGroupName"]);
    }
    if (output["LifecycleTransition"] !== undefined) {
        contents.LifecycleTransition = (0, smithy_client_1.expectString)(output["LifecycleTransition"]);
    }
    if (output["NotificationTargetARN"] !== undefined) {
        contents.NotificationTargetARN = (0, smithy_client_1.expectString)(output["NotificationTargetARN"]);
    }
    if (output["RoleARN"] !== undefined) {
        contents.RoleARN = (0, smithy_client_1.expectString)(output["RoleARN"]);
    }
    if (output["NotificationMetadata"] !== undefined) {
        contents.NotificationMetadata = (0, smithy_client_1.expectString)(output["NotificationMetadata"]);
    }
    if (output["HeartbeatTimeout"] !== undefined) {
        contents.HeartbeatTimeout = (0, smithy_client_1.strictParseInt32)(output["HeartbeatTimeout"]);
    }
    if (output["GlobalTimeout"] !== undefined) {
        contents.GlobalTimeout = (0, smithy_client_1.strictParseInt32)(output["GlobalTimeout"]);
    }
    if (output["DefaultResult"] !== undefined) {
        contents.DefaultResult = (0, smithy_client_1.expectString)(output["DefaultResult"]);
    }
    return contents;
};
const deserializeAws_queryLifecycleHooks = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryLifecycleHook(entry, context);
    });
};
const deserializeAws_queryLimitExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryLoadBalancerNames = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_queryLoadBalancerState = (output, context) => {
    const contents = {
        LoadBalancerName: undefined,
        State: undefined,
    };
    if (output["LoadBalancerName"] !== undefined) {
        contents.LoadBalancerName = (0, smithy_client_1.expectString)(output["LoadBalancerName"]);
    }
    if (output["State"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["State"]);
    }
    return contents;
};
const deserializeAws_queryLoadBalancerStates = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryLoadBalancerState(entry, context);
    });
};
const deserializeAws_queryLoadBalancerTargetGroupState = (output, context) => {
    const contents = {
        LoadBalancerTargetGroupARN: undefined,
        State: undefined,
    };
    if (output["LoadBalancerTargetGroupARN"] !== undefined) {
        contents.LoadBalancerTargetGroupARN = (0, smithy_client_1.expectString)(output["LoadBalancerTargetGroupARN"]);
    }
    if (output["State"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["State"]);
    }
    return contents;
};
const deserializeAws_queryLoadBalancerTargetGroupStates = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryLoadBalancerTargetGroupState(entry, context);
    });
};
const deserializeAws_queryLoadForecast = (output, context) => {
    const contents = {
        Timestamps: undefined,
        Values: undefined,
        MetricSpecification: undefined,
    };
    if (output.Timestamps === "") {
        contents.Timestamps = [];
    }
    else if (output["Timestamps"] !== undefined && output["Timestamps"]["member"] !== undefined) {
        contents.Timestamps = deserializeAws_queryPredictiveScalingForecastTimestamps((0, smithy_client_1.getArrayIfSingleItem)(output["Timestamps"]["member"]), context);
    }
    if (output.Values === "") {
        contents.Values = [];
    }
    else if (output["Values"] !== undefined && output["Values"]["member"] !== undefined) {
        contents.Values = deserializeAws_queryPredictiveScalingForecastValues((0, smithy_client_1.getArrayIfSingleItem)(output["Values"]["member"]), context);
    }
    if (output["MetricSpecification"] !== undefined) {
        contents.MetricSpecification = deserializeAws_queryPredictiveScalingMetricSpecification(output["MetricSpecification"], context);
    }
    return contents;
};
const deserializeAws_queryLoadForecasts = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryLoadForecast(entry, context);
    });
};
const deserializeAws_queryLocalStorageTypes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_queryMemoryGiBPerVCpuRequest = (output, context) => {
    const contents = {
        Min: undefined,
        Max: undefined,
    };
    if (output["Min"] !== undefined) {
        contents.Min = (0, smithy_client_1.strictParseFloat)(output["Min"]);
    }
    if (output["Max"] !== undefined) {
        contents.Max = (0, smithy_client_1.strictParseFloat)(output["Max"]);
    }
    return contents;
};
const deserializeAws_queryMemoryMiBRequest = (output, context) => {
    const contents = {
        Min: undefined,
        Max: undefined,
    };
    if (output["Min"] !== undefined) {
        contents.Min = (0, smithy_client_1.strictParseInt32)(output["Min"]);
    }
    if (output["Max"] !== undefined) {
        contents.Max = (0, smithy_client_1.strictParseInt32)(output["Max"]);
    }
    return contents;
};
const deserializeAws_queryMetric = (output, context) => {
    const contents = {
        Namespace: undefined,
        MetricName: undefined,
        Dimensions: undefined,
    };
    if (output["Namespace"] !== undefined) {
        contents.Namespace = (0, smithy_client_1.expectString)(output["Namespace"]);
    }
    if (output["MetricName"] !== undefined) {
        contents.MetricName = (0, smithy_client_1.expectString)(output["MetricName"]);
    }
    if (output.Dimensions === "") {
        contents.Dimensions = [];
    }
    else if (output["Dimensions"] !== undefined && output["Dimensions"]["member"] !== undefined) {
        contents.Dimensions = deserializeAws_queryMetricDimensions((0, smithy_client_1.getArrayIfSingleItem)(output["Dimensions"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryMetricCollectionType = (output, context) => {
    const contents = {
        Metric: undefined,
    };
    if (output["Metric"] !== undefined) {
        contents.Metric = (0, smithy_client_1.expectString)(output["Metric"]);
    }
    return contents;
};
const deserializeAws_queryMetricCollectionTypes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryMetricCollectionType(entry, context);
    });
};
const deserializeAws_queryMetricDataQueries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryMetricDataQuery(entry, context);
    });
};
const deserializeAws_queryMetricDataQuery = (output, context) => {
    const contents = {
        Id: undefined,
        Expression: undefined,
        MetricStat: undefined,
        Label: undefined,
        ReturnData: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
    }
    if (output["Expression"] !== undefined) {
        contents.Expression = (0, smithy_client_1.expectString)(output["Expression"]);
    }
    if (output["MetricStat"] !== undefined) {
        contents.MetricStat = deserializeAws_queryMetricStat(output["MetricStat"], context);
    }
    if (output["Label"] !== undefined) {
        contents.Label = (0, smithy_client_1.expectString)(output["Label"]);
    }
    if (output["ReturnData"] !== undefined) {
        contents.ReturnData = (0, smithy_client_1.parseBoolean)(output["ReturnData"]);
    }
    return contents;
};
const deserializeAws_queryMetricDimension = (output, context) => {
    const contents = {
        Name: undefined,
        Value: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = (0, smithy_client_1.expectString)(output["Value"]);
    }
    return contents;
};
const deserializeAws_queryMetricDimensions = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryMetricDimension(entry, context);
    });
};
const deserializeAws_queryMetricGranularityType = (output, context) => {
    const contents = {
        Granularity: undefined,
    };
    if (output["Granularity"] !== undefined) {
        contents.Granularity = (0, smithy_client_1.expectString)(output["Granularity"]);
    }
    return contents;
};
const deserializeAws_queryMetricGranularityTypes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryMetricGranularityType(entry, context);
    });
};
const deserializeAws_queryMetricStat = (output, context) => {
    const contents = {
        Metric: undefined,
        Stat: undefined,
        Unit: undefined,
    };
    if (output["Metric"] !== undefined) {
        contents.Metric = deserializeAws_queryMetric(output["Metric"], context);
    }
    if (output["Stat"] !== undefined) {
        contents.Stat = (0, smithy_client_1.expectString)(output["Stat"]);
    }
    if (output["Unit"] !== undefined) {
        contents.Unit = (0, smithy_client_1.expectString)(output["Unit"]);
    }
    return contents;
};
const deserializeAws_queryMixedInstancesPolicy = (output, context) => {
    const contents = {
        LaunchTemplate: undefined,
        InstancesDistribution: undefined,
    };
    if (output["LaunchTemplate"] !== undefined) {
        contents.LaunchTemplate = deserializeAws_queryLaunchTemplate(output["LaunchTemplate"], context);
    }
    if (output["InstancesDistribution"] !== undefined) {
        contents.InstancesDistribution = deserializeAws_queryInstancesDistribution(output["InstancesDistribution"], context);
    }
    return contents;
};
const deserializeAws_queryNetworkBandwidthGbpsRequest = (output, context) => {
    const contents = {
        Min: undefined,
        Max: undefined,
    };
    if (output["Min"] !== undefined) {
        contents.Min = (0, smithy_client_1.strictParseFloat)(output["Min"]);
    }
    if (output["Max"] !== undefined) {
        contents.Max = (0, smithy_client_1.strictParseFloat)(output["Max"]);
    }
    return contents;
};
const deserializeAws_queryNetworkInterfaceCountRequest = (output, context) => {
    const contents = {
        Min: undefined,
        Max: undefined,
    };
    if (output["Min"] !== undefined) {
        contents.Min = (0, smithy_client_1.strictParseInt32)(output["Min"]);
    }
    if (output["Max"] !== undefined) {
        contents.Max = (0, smithy_client_1.strictParseInt32)(output["Max"]);
    }
    return contents;
};
const deserializeAws_queryNotificationConfiguration = (output, context) => {
    const contents = {
        AutoScalingGroupName: undefined,
        TopicARN: undefined,
        NotificationType: undefined,
    };
    if (output["AutoScalingGroupName"] !== undefined) {
        contents.AutoScalingGroupName = (0, smithy_client_1.expectString)(output["AutoScalingGroupName"]);
    }
    if (output["TopicARN"] !== undefined) {
        contents.TopicARN = (0, smithy_client_1.expectString)(output["TopicARN"]);
    }
    if (output["NotificationType"] !== undefined) {
        contents.NotificationType = (0, smithy_client_1.expectString)(output["NotificationType"]);
    }
    return contents;
};
const deserializeAws_queryNotificationConfigurations = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryNotificationConfiguration(entry, context);
    });
};
const deserializeAws_queryOverrides = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryLaunchTemplateOverrides(entry, context);
    });
};
const deserializeAws_queryPoliciesType = (output, context) => {
    const contents = {
        ScalingPolicies: undefined,
        NextToken: undefined,
    };
    if (output.ScalingPolicies === "") {
        contents.ScalingPolicies = [];
    }
    else if (output["ScalingPolicies"] !== undefined && output["ScalingPolicies"]["member"] !== undefined) {
        contents.ScalingPolicies = deserializeAws_queryScalingPolicies((0, smithy_client_1.getArrayIfSingleItem)(output["ScalingPolicies"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryPolicyARNType = (output, context) => {
    const contents = {
        PolicyARN: undefined,
        Alarms: undefined,
    };
    if (output["PolicyARN"] !== undefined) {
        contents.PolicyARN = (0, smithy_client_1.expectString)(output["PolicyARN"]);
    }
    if (output.Alarms === "") {
        contents.Alarms = [];
    }
    else if (output["Alarms"] !== undefined && output["Alarms"]["member"] !== undefined) {
        contents.Alarms = deserializeAws_queryAlarms((0, smithy_client_1.getArrayIfSingleItem)(output["Alarms"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryPredefinedMetricSpecification = (output, context) => {
    const contents = {
        PredefinedMetricType: undefined,
        ResourceLabel: undefined,
    };
    if (output["PredefinedMetricType"] !== undefined) {
        contents.PredefinedMetricType = (0, smithy_client_1.expectString)(output["PredefinedMetricType"]);
    }
    if (output["ResourceLabel"] !== undefined) {
        contents.ResourceLabel = (0, smithy_client_1.expectString)(output["ResourceLabel"]);
    }
    return contents;
};
const deserializeAws_queryPredictiveScalingConfiguration = (output, context) => {
    const contents = {
        MetricSpecifications: undefined,
        Mode: undefined,
        SchedulingBufferTime: undefined,
        MaxCapacityBreachBehavior: undefined,
        MaxCapacityBuffer: undefined,
    };
    if (output.MetricSpecifications === "") {
        contents.MetricSpecifications = [];
    }
    else if (output["MetricSpecifications"] !== undefined && output["MetricSpecifications"]["member"] !== undefined) {
        contents.MetricSpecifications = deserializeAws_queryPredictiveScalingMetricSpecifications((0, smithy_client_1.getArrayIfSingleItem)(output["MetricSpecifications"]["member"]), context);
    }
    if (output["Mode"] !== undefined) {
        contents.Mode = (0, smithy_client_1.expectString)(output["Mode"]);
    }
    if (output["SchedulingBufferTime"] !== undefined) {
        contents.SchedulingBufferTime = (0, smithy_client_1.strictParseInt32)(output["SchedulingBufferTime"]);
    }
    if (output["MaxCapacityBreachBehavior"] !== undefined) {
        contents.MaxCapacityBreachBehavior = (0, smithy_client_1.expectString)(output["MaxCapacityBreachBehavior"]);
    }
    if (output["MaxCapacityBuffer"] !== undefined) {
        contents.MaxCapacityBuffer = (0, smithy_client_1.strictParseInt32)(output["MaxCapacityBuffer"]);
    }
    return contents;
};
const deserializeAws_queryPredictiveScalingCustomizedCapacityMetric = (output, context) => {
    const contents = {
        MetricDataQueries: undefined,
    };
    if (output.MetricDataQueries === "") {
        contents.MetricDataQueries = [];
    }
    else if (output["MetricDataQueries"] !== undefined && output["MetricDataQueries"]["member"] !== undefined) {
        contents.MetricDataQueries = deserializeAws_queryMetricDataQueries((0, smithy_client_1.getArrayIfSingleItem)(output["MetricDataQueries"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryPredictiveScalingCustomizedLoadMetric = (output, context) => {
    const contents = {
        MetricDataQueries: undefined,
    };
    if (output.MetricDataQueries === "") {
        contents.MetricDataQueries = [];
    }
    else if (output["MetricDataQueries"] !== undefined && output["MetricDataQueries"]["member"] !== undefined) {
        contents.MetricDataQueries = deserializeAws_queryMetricDataQueries((0, smithy_client_1.getArrayIfSingleItem)(output["MetricDataQueries"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryPredictiveScalingCustomizedScalingMetric = (output, context) => {
    const contents = {
        MetricDataQueries: undefined,
    };
    if (output.MetricDataQueries === "") {
        contents.MetricDataQueries = [];
    }
    else if (output["MetricDataQueries"] !== undefined && output["MetricDataQueries"]["member"] !== undefined) {
        contents.MetricDataQueries = deserializeAws_queryMetricDataQueries((0, smithy_client_1.getArrayIfSingleItem)(output["MetricDataQueries"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryPredictiveScalingForecastTimestamps = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(entry));
    });
};
const deserializeAws_queryPredictiveScalingForecastValues = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.strictParseFloat)(entry);
    });
};
const deserializeAws_queryPredictiveScalingMetricSpecification = (output, context) => {
    const contents = {
        TargetValue: undefined,
        PredefinedMetricPairSpecification: undefined,
        PredefinedScalingMetricSpecification: undefined,
        PredefinedLoadMetricSpecification: undefined,
        CustomizedScalingMetricSpecification: undefined,
        CustomizedLoadMetricSpecification: undefined,
        CustomizedCapacityMetricSpecification: undefined,
    };
    if (output["TargetValue"] !== undefined) {
        contents.TargetValue = (0, smithy_client_1.strictParseFloat)(output["TargetValue"]);
    }
    if (output["PredefinedMetricPairSpecification"] !== undefined) {
        contents.PredefinedMetricPairSpecification = deserializeAws_queryPredictiveScalingPredefinedMetricPair(output["PredefinedMetricPairSpecification"], context);
    }
    if (output["PredefinedScalingMetricSpecification"] !== undefined) {
        contents.PredefinedScalingMetricSpecification = deserializeAws_queryPredictiveScalingPredefinedScalingMetric(output["PredefinedScalingMetricSpecification"], context);
    }
    if (output["PredefinedLoadMetricSpecification"] !== undefined) {
        contents.PredefinedLoadMetricSpecification = deserializeAws_queryPredictiveScalingPredefinedLoadMetric(output["PredefinedLoadMetricSpecification"], context);
    }
    if (output["CustomizedScalingMetricSpecification"] !== undefined) {
        contents.CustomizedScalingMetricSpecification = deserializeAws_queryPredictiveScalingCustomizedScalingMetric(output["CustomizedScalingMetricSpecification"], context);
    }
    if (output["CustomizedLoadMetricSpecification"] !== undefined) {
        contents.CustomizedLoadMetricSpecification = deserializeAws_queryPredictiveScalingCustomizedLoadMetric(output["CustomizedLoadMetricSpecification"], context);
    }
    if (output["CustomizedCapacityMetricSpecification"] !== undefined) {
        contents.CustomizedCapacityMetricSpecification = deserializeAws_queryPredictiveScalingCustomizedCapacityMetric(output["CustomizedCapacityMetricSpecification"], context);
    }
    return contents;
};
const deserializeAws_queryPredictiveScalingMetricSpecifications = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryPredictiveScalingMetricSpecification(entry, context);
    });
};
const deserializeAws_queryPredictiveScalingPredefinedLoadMetric = (output, context) => {
    const contents = {
        PredefinedMetricType: undefined,
        ResourceLabel: undefined,
    };
    if (output["PredefinedMetricType"] !== undefined) {
        contents.PredefinedMetricType = (0, smithy_client_1.expectString)(output["PredefinedMetricType"]);
    }
    if (output["ResourceLabel"] !== undefined) {
        contents.ResourceLabel = (0, smithy_client_1.expectString)(output["ResourceLabel"]);
    }
    return contents;
};
const deserializeAws_queryPredictiveScalingPredefinedMetricPair = (output, context) => {
    const contents = {
        PredefinedMetricType: undefined,
        ResourceLabel: undefined,
    };
    if (output["PredefinedMetricType"] !== undefined) {
        contents.PredefinedMetricType = (0, smithy_client_1.expectString)(output["PredefinedMetricType"]);
    }
    if (output["ResourceLabel"] !== undefined) {
        contents.ResourceLabel = (0, smithy_client_1.expectString)(output["ResourceLabel"]);
    }
    return contents;
};
const deserializeAws_queryPredictiveScalingPredefinedScalingMetric = (output, context) => {
    const contents = {
        PredefinedMetricType: undefined,
        ResourceLabel: undefined,
    };
    if (output["PredefinedMetricType"] !== undefined) {
        contents.PredefinedMetricType = (0, smithy_client_1.expectString)(output["PredefinedMetricType"]);
    }
    if (output["ResourceLabel"] !== undefined) {
        contents.ResourceLabel = (0, smithy_client_1.expectString)(output["ResourceLabel"]);
    }
    return contents;
};
const deserializeAws_queryProcesses = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryProcessType(entry, context);
    });
};
const deserializeAws_queryProcessesType = (output, context) => {
    const contents = {
        Processes: undefined,
    };
    if (output.Processes === "") {
        contents.Processes = [];
    }
    else if (output["Processes"] !== undefined && output["Processes"]["member"] !== undefined) {
        contents.Processes = deserializeAws_queryProcesses((0, smithy_client_1.getArrayIfSingleItem)(output["Processes"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryProcessType = (output, context) => {
    const contents = {
        ProcessName: undefined,
    };
    if (output["ProcessName"] !== undefined) {
        contents.ProcessName = (0, smithy_client_1.expectString)(output["ProcessName"]);
    }
    return contents;
};
const deserializeAws_queryPutLifecycleHookAnswer = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryPutWarmPoolAnswer = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryRecordLifecycleActionHeartbeatAnswer = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryRefreshPreferences = (output, context) => {
    const contents = {
        MinHealthyPercentage: undefined,
        InstanceWarmup: undefined,
        CheckpointPercentages: undefined,
        CheckpointDelay: undefined,
        SkipMatching: undefined,
    };
    if (output["MinHealthyPercentage"] !== undefined) {
        contents.MinHealthyPercentage = (0, smithy_client_1.strictParseInt32)(output["MinHealthyPercentage"]);
    }
    if (output["InstanceWarmup"] !== undefined) {
        contents.InstanceWarmup = (0, smithy_client_1.strictParseInt32)(output["InstanceWarmup"]);
    }
    if (output.CheckpointPercentages === "") {
        contents.CheckpointPercentages = [];
    }
    else if (output["CheckpointPercentages"] !== undefined && output["CheckpointPercentages"]["member"] !== undefined) {
        contents.CheckpointPercentages = deserializeAws_queryCheckpointPercentages((0, smithy_client_1.getArrayIfSingleItem)(output["CheckpointPercentages"]["member"]), context);
    }
    if (output["CheckpointDelay"] !== undefined) {
        contents.CheckpointDelay = (0, smithy_client_1.strictParseInt32)(output["CheckpointDelay"]);
    }
    if (output["SkipMatching"] !== undefined) {
        contents.SkipMatching = (0, smithy_client_1.parseBoolean)(output["SkipMatching"]);
    }
    return contents;
};
const deserializeAws_queryResourceContentionFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryResourceInUseFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryScalingActivityInProgressFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryScalingPolicies = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryScalingPolicy(entry, context);
    });
};
const deserializeAws_queryScalingPolicy = (output, context) => {
    const contents = {
        AutoScalingGroupName: undefined,
        PolicyName: undefined,
        PolicyARN: undefined,
        PolicyType: undefined,
        AdjustmentType: undefined,
        MinAdjustmentStep: undefined,
        MinAdjustmentMagnitude: undefined,
        ScalingAdjustment: undefined,
        Cooldown: undefined,
        StepAdjustments: undefined,
        MetricAggregationType: undefined,
        EstimatedInstanceWarmup: undefined,
        Alarms: undefined,
        TargetTrackingConfiguration: undefined,
        Enabled: undefined,
        PredictiveScalingConfiguration: undefined,
    };
    if (output["AutoScalingGroupName"] !== undefined) {
        contents.AutoScalingGroupName = (0, smithy_client_1.expectString)(output["AutoScalingGroupName"]);
    }
    if (output["PolicyName"] !== undefined) {
        contents.PolicyName = (0, smithy_client_1.expectString)(output["PolicyName"]);
    }
    if (output["PolicyARN"] !== undefined) {
        contents.PolicyARN = (0, smithy_client_1.expectString)(output["PolicyARN"]);
    }
    if (output["PolicyType"] !== undefined) {
        contents.PolicyType = (0, smithy_client_1.expectString)(output["PolicyType"]);
    }
    if (output["AdjustmentType"] !== undefined) {
        contents.AdjustmentType = (0, smithy_client_1.expectString)(output["AdjustmentType"]);
    }
    if (output["MinAdjustmentStep"] !== undefined) {
        contents.MinAdjustmentStep = (0, smithy_client_1.strictParseInt32)(output["MinAdjustmentStep"]);
    }
    if (output["MinAdjustmentMagnitude"] !== undefined) {
        contents.MinAdjustmentMagnitude = (0, smithy_client_1.strictParseInt32)(output["MinAdjustmentMagnitude"]);
    }
    if (output["ScalingAdjustment"] !== undefined) {
        contents.ScalingAdjustment = (0, smithy_client_1.strictParseInt32)(output["ScalingAdjustment"]);
    }
    if (output["Cooldown"] !== undefined) {
        contents.Cooldown = (0, smithy_client_1.strictParseInt32)(output["Cooldown"]);
    }
    if (output.StepAdjustments === "") {
        contents.StepAdjustments = [];
    }
    else if (output["StepAdjustments"] !== undefined && output["StepAdjustments"]["member"] !== undefined) {
        contents.StepAdjustments = deserializeAws_queryStepAdjustments((0, smithy_client_1.getArrayIfSingleItem)(output["StepAdjustments"]["member"]), context);
    }
    if (output["MetricAggregationType"] !== undefined) {
        contents.MetricAggregationType = (0, smithy_client_1.expectString)(output["MetricAggregationType"]);
    }
    if (output["EstimatedInstanceWarmup"] !== undefined) {
        contents.EstimatedInstanceWarmup = (0, smithy_client_1.strictParseInt32)(output["EstimatedInstanceWarmup"]);
    }
    if (output.Alarms === "") {
        contents.Alarms = [];
    }
    else if (output["Alarms"] !== undefined && output["Alarms"]["member"] !== undefined) {
        contents.Alarms = deserializeAws_queryAlarms((0, smithy_client_1.getArrayIfSingleItem)(output["Alarms"]["member"]), context);
    }
    if (output["TargetTrackingConfiguration"] !== undefined) {
        contents.TargetTrackingConfiguration = deserializeAws_queryTargetTrackingConfiguration(output["TargetTrackingConfiguration"], context);
    }
    if (output["Enabled"] !== undefined) {
        contents.Enabled = (0, smithy_client_1.parseBoolean)(output["Enabled"]);
    }
    if (output["PredictiveScalingConfiguration"] !== undefined) {
        contents.PredictiveScalingConfiguration = deserializeAws_queryPredictiveScalingConfiguration(output["PredictiveScalingConfiguration"], context);
    }
    return contents;
};
const deserializeAws_queryScheduledActionsType = (output, context) => {
    const contents = {
        ScheduledUpdateGroupActions: undefined,
        NextToken: undefined,
    };
    if (output.ScheduledUpdateGroupActions === "") {
        contents.ScheduledUpdateGroupActions = [];
    }
    else if (output["ScheduledUpdateGroupActions"] !== undefined &&
        output["ScheduledUpdateGroupActions"]["member"] !== undefined) {
        contents.ScheduledUpdateGroupActions = deserializeAws_queryScheduledUpdateGroupActions((0, smithy_client_1.getArrayIfSingleItem)(output["ScheduledUpdateGroupActions"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryScheduledUpdateGroupAction = (output, context) => {
    const contents = {
        AutoScalingGroupName: undefined,
        ScheduledActionName: undefined,
        ScheduledActionARN: undefined,
        Time: undefined,
        StartTime: undefined,
        EndTime: undefined,
        Recurrence: undefined,
        MinSize: undefined,
        MaxSize: undefined,
        DesiredCapacity: undefined,
        TimeZone: undefined,
    };
    if (output["AutoScalingGroupName"] !== undefined) {
        contents.AutoScalingGroupName = (0, smithy_client_1.expectString)(output["AutoScalingGroupName"]);
    }
    if (output["ScheduledActionName"] !== undefined) {
        contents.ScheduledActionName = (0, smithy_client_1.expectString)(output["ScheduledActionName"]);
    }
    if (output["ScheduledActionARN"] !== undefined) {
        contents.ScheduledActionARN = (0, smithy_client_1.expectString)(output["ScheduledActionARN"]);
    }
    if (output["Time"] !== undefined) {
        contents.Time = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["Time"]));
    }
    if (output["StartTime"] !== undefined) {
        contents.StartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["StartTime"]));
    }
    if (output["EndTime"] !== undefined) {
        contents.EndTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["EndTime"]));
    }
    if (output["Recurrence"] !== undefined) {
        contents.Recurrence = (0, smithy_client_1.expectString)(output["Recurrence"]);
    }
    if (output["MinSize"] !== undefined) {
        contents.MinSize = (0, smithy_client_1.strictParseInt32)(output["MinSize"]);
    }
    if (output["MaxSize"] !== undefined) {
        contents.MaxSize = (0, smithy_client_1.strictParseInt32)(output["MaxSize"]);
    }
    if (output["DesiredCapacity"] !== undefined) {
        contents.DesiredCapacity = (0, smithy_client_1.strictParseInt32)(output["DesiredCapacity"]);
    }
    if (output["TimeZone"] !== undefined) {
        contents.TimeZone = (0, smithy_client_1.expectString)(output["TimeZone"]);
    }
    return contents;
};
const deserializeAws_queryScheduledUpdateGroupActions = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryScheduledUpdateGroupAction(entry, context);
    });
};
const deserializeAws_querySecurityGroups = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_queryServiceLinkedRoleFailure = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_querySetInstanceProtectionAnswer = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryStartInstanceRefreshAnswer = (output, context) => {
    const contents = {
        InstanceRefreshId: undefined,
    };
    if (output["InstanceRefreshId"] !== undefined) {
        contents.InstanceRefreshId = (0, smithy_client_1.expectString)(output["InstanceRefreshId"]);
    }
    return contents;
};
const deserializeAws_queryStepAdjustment = (output, context) => {
    const contents = {
        MetricIntervalLowerBound: undefined,
        MetricIntervalUpperBound: undefined,
        ScalingAdjustment: undefined,
    };
    if (output["MetricIntervalLowerBound"] !== undefined) {
        contents.MetricIntervalLowerBound = (0, smithy_client_1.strictParseFloat)(output["MetricIntervalLowerBound"]);
    }
    if (output["MetricIntervalUpperBound"] !== undefined) {
        contents.MetricIntervalUpperBound = (0, smithy_client_1.strictParseFloat)(output["MetricIntervalUpperBound"]);
    }
    if (output["ScalingAdjustment"] !== undefined) {
        contents.ScalingAdjustment = (0, smithy_client_1.strictParseInt32)(output["ScalingAdjustment"]);
    }
    return contents;
};
const deserializeAws_queryStepAdjustments = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryStepAdjustment(entry, context);
    });
};
const deserializeAws_querySuspendedProcess = (output, context) => {
    const contents = {
        ProcessName: undefined,
        SuspensionReason: undefined,
    };
    if (output["ProcessName"] !== undefined) {
        contents.ProcessName = (0, smithy_client_1.expectString)(output["ProcessName"]);
    }
    if (output["SuspensionReason"] !== undefined) {
        contents.SuspensionReason = (0, smithy_client_1.expectString)(output["SuspensionReason"]);
    }
    return contents;
};
const deserializeAws_querySuspendedProcesses = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_querySuspendedProcess(entry, context);
    });
};
const deserializeAws_queryTagDescription = (output, context) => {
    const contents = {
        ResourceId: undefined,
        ResourceType: undefined,
        Key: undefined,
        Value: undefined,
        PropagateAtLaunch: undefined,
    };
    if (output["ResourceId"] !== undefined) {
        contents.ResourceId = (0, smithy_client_1.expectString)(output["ResourceId"]);
    }
    if (output["ResourceType"] !== undefined) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["ResourceType"]);
    }
    if (output["Key"] !== undefined) {
        contents.Key = (0, smithy_client_1.expectString)(output["Key"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = (0, smithy_client_1.expectString)(output["Value"]);
    }
    if (output["PropagateAtLaunch"] !== undefined) {
        contents.PropagateAtLaunch = (0, smithy_client_1.parseBoolean)(output["PropagateAtLaunch"]);
    }
    return contents;
};
const deserializeAws_queryTagDescriptionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryTagDescription(entry, context);
    });
};
const deserializeAws_queryTagsType = (output, context) => {
    const contents = {
        Tags: undefined,
        NextToken: undefined,
    };
    if (output.Tags === "") {
        contents.Tags = [];
    }
    else if (output["Tags"] !== undefined && output["Tags"]["member"] !== undefined) {
        contents.Tags = deserializeAws_queryTagDescriptionList((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryTargetGroupARNs = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_queryTargetTrackingConfiguration = (output, context) => {
    const contents = {
        PredefinedMetricSpecification: undefined,
        CustomizedMetricSpecification: undefined,
        TargetValue: undefined,
        DisableScaleIn: undefined,
    };
    if (output["PredefinedMetricSpecification"] !== undefined) {
        contents.PredefinedMetricSpecification = deserializeAws_queryPredefinedMetricSpecification(output["PredefinedMetricSpecification"], context);
    }
    if (output["CustomizedMetricSpecification"] !== undefined) {
        contents.CustomizedMetricSpecification = deserializeAws_queryCustomizedMetricSpecification(output["CustomizedMetricSpecification"], context);
    }
    if (output["TargetValue"] !== undefined) {
        contents.TargetValue = (0, smithy_client_1.strictParseFloat)(output["TargetValue"]);
    }
    if (output["DisableScaleIn"] !== undefined) {
        contents.DisableScaleIn = (0, smithy_client_1.parseBoolean)(output["DisableScaleIn"]);
    }
    return contents;
};
const deserializeAws_queryTerminationPolicies = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_queryTotalLocalStorageGBRequest = (output, context) => {
    const contents = {
        Min: undefined,
        Max: undefined,
    };
    if (output["Min"] !== undefined) {
        contents.Min = (0, smithy_client_1.strictParseFloat)(output["Min"]);
    }
    if (output["Max"] !== undefined) {
        contents.Max = (0, smithy_client_1.strictParseFloat)(output["Max"]);
    }
    return contents;
};
const deserializeAws_queryVCpuCountRequest = (output, context) => {
    const contents = {
        Min: undefined,
        Max: undefined,
    };
    if (output["Min"] !== undefined) {
        contents.Min = (0, smithy_client_1.strictParseInt32)(output["Min"]);
    }
    if (output["Max"] !== undefined) {
        contents.Max = (0, smithy_client_1.strictParseInt32)(output["Max"]);
    }
    return contents;
};
const deserializeAws_queryWarmPoolConfiguration = (output, context) => {
    const contents = {
        MaxGroupPreparedCapacity: undefined,
        MinSize: undefined,
        PoolState: undefined,
        Status: undefined,
        InstanceReusePolicy: undefined,
    };
    if (output["MaxGroupPreparedCapacity"] !== undefined) {
        contents.MaxGroupPreparedCapacity = (0, smithy_client_1.strictParseInt32)(output["MaxGroupPreparedCapacity"]);
    }
    if (output["MinSize"] !== undefined) {
        contents.MinSize = (0, smithy_client_1.strictParseInt32)(output["MinSize"]);
    }
    if (output["PoolState"] !== undefined) {
        contents.PoolState = (0, smithy_client_1.expectString)(output["PoolState"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["InstanceReusePolicy"] !== undefined) {
        contents.InstanceReusePolicy = deserializeAws_queryInstanceReusePolicy(output["InstanceReusePolicy"], context);
    }
    return contents;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        const parser = new fast_xml_parser_1.XMLParser({
            attributeNamePrefix: "",
            htmlEntities: true,
            ignoreAttributes: false,
            ignoreDeclaration: true,
            parseTagValue: false,
            trimValues: false,
            tagValueProcessor: (_, val) => (val.trim() === "" && val.includes("\n") ? "" : undefined),
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        const parsedObj = parser.parse(encoded);
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
            parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
            delete parsedObjToReturn[textNodeName];
        }
        return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
    }
    return value;
};
const buildFormUrlencodedString = (formEntries) => Object.entries(formEntries)
    .map(([key, value]) => (0, smithy_client_1.extendedEncodeURIComponent)(key) + "=" + (0, smithy_client_1.extendedEncodeURIComponent)(value))
    .join("&");
const loadQueryErrorCode = (output, data) => {
    if (data.Error.Code !== undefined) {
        return data.Error.Code;
    }
    if (output.statusCode == 404) {
        return "NotFound";
    }
};
