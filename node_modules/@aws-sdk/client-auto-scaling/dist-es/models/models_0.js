import { AutoScalingServiceException as __BaseException } from "./AutoScalingServiceException";
export var AcceleratorManufacturer;
(function (AcceleratorManufacturer) {
    AcceleratorManufacturer["AMAZON_WEB_SERVICES"] = "amazon-web-services";
    AcceleratorManufacturer["AMD"] = "amd";
    AcceleratorManufacturer["NVIDIA"] = "nvidia";
    AcceleratorManufacturer["XILINX"] = "xilinx";
})(AcceleratorManufacturer || (AcceleratorManufacturer = {}));
export var AcceleratorName;
(function (AcceleratorName) {
    AcceleratorName["A100"] = "a100";
    AcceleratorName["K80"] = "k80";
    AcceleratorName["M60"] = "m60";
    AcceleratorName["RADEON_PRO_V520"] = "radeon-pro-v520";
    AcceleratorName["T4"] = "t4";
    AcceleratorName["V100"] = "v100";
    AcceleratorName["VU9P"] = "vu9p";
})(AcceleratorName || (AcceleratorName = {}));
export var AcceleratorType;
(function (AcceleratorType) {
    AcceleratorType["FPGA"] = "fpga";
    AcceleratorType["GPU"] = "gpu";
    AcceleratorType["INFERENCE"] = "inference";
})(AcceleratorType || (AcceleratorType = {}));
export class ActiveInstanceRefreshNotFoundFault extends __BaseException {
    constructor(opts) {
        super({
            name: "ActiveInstanceRefreshNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "ActiveInstanceRefreshNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ActiveInstanceRefreshNotFoundFault.prototype);
    }
}
export var ScalingActivityStatusCode;
(function (ScalingActivityStatusCode) {
    ScalingActivityStatusCode["Cancelled"] = "Cancelled";
    ScalingActivityStatusCode["Failed"] = "Failed";
    ScalingActivityStatusCode["InProgress"] = "InProgress";
    ScalingActivityStatusCode["MidLifecycleAction"] = "MidLifecycleAction";
    ScalingActivityStatusCode["PendingSpotBidPlacement"] = "PendingSpotBidPlacement";
    ScalingActivityStatusCode["PreInService"] = "PreInService";
    ScalingActivityStatusCode["Successful"] = "Successful";
    ScalingActivityStatusCode["WaitingForELBConnectionDraining"] = "WaitingForELBConnectionDraining";
    ScalingActivityStatusCode["WaitingForInstanceId"] = "WaitingForInstanceId";
    ScalingActivityStatusCode["WaitingForInstanceWarmup"] = "WaitingForInstanceWarmup";
    ScalingActivityStatusCode["WaitingForSpotInstanceId"] = "WaitingForSpotInstanceId";
    ScalingActivityStatusCode["WaitingForSpotInstanceRequestId"] = "WaitingForSpotInstanceRequestId";
})(ScalingActivityStatusCode || (ScalingActivityStatusCode = {}));
export class AlreadyExistsFault extends __BaseException {
    constructor(opts) {
        super({
            name: "AlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "AlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, AlreadyExistsFault.prototype);
    }
}
export class ResourceContentionFault extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceContentionFault",
            $fault: "server",
            ...opts,
        });
        this.name = "ResourceContentionFault";
        this.$fault = "server";
        Object.setPrototypeOf(this, ResourceContentionFault.prototype);
    }
}
export class ServiceLinkedRoleFailure extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceLinkedRoleFailure",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceLinkedRoleFailure";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceLinkedRoleFailure.prototype);
    }
}
export class LimitExceededFault extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededFault.prototype);
    }
}
export var BareMetal;
(function (BareMetal) {
    BareMetal["EXCLUDED"] = "excluded";
    BareMetal["INCLUDED"] = "included";
    BareMetal["REQUIRED"] = "required";
})(BareMetal || (BareMetal = {}));
export var BurstablePerformance;
(function (BurstablePerformance) {
    BurstablePerformance["EXCLUDED"] = "excluded";
    BurstablePerformance["INCLUDED"] = "included";
    BurstablePerformance["REQUIRED"] = "required";
})(BurstablePerformance || (BurstablePerformance = {}));
export var CpuManufacturer;
(function (CpuManufacturer) {
    CpuManufacturer["AMAZON_WEB_SERVICES"] = "amazon-web-services";
    CpuManufacturer["AMD"] = "amd";
    CpuManufacturer["INTEL"] = "intel";
})(CpuManufacturer || (CpuManufacturer = {}));
export var InstanceGeneration;
(function (InstanceGeneration) {
    InstanceGeneration["CURRENT"] = "current";
    InstanceGeneration["PREVIOUS"] = "previous";
})(InstanceGeneration || (InstanceGeneration = {}));
export var LocalStorage;
(function (LocalStorage) {
    LocalStorage["EXCLUDED"] = "excluded";
    LocalStorage["INCLUDED"] = "included";
    LocalStorage["REQUIRED"] = "required";
})(LocalStorage || (LocalStorage = {}));
export var LocalStorageType;
(function (LocalStorageType) {
    LocalStorageType["HDD"] = "hdd";
    LocalStorageType["SSD"] = "ssd";
})(LocalStorageType || (LocalStorageType = {}));
export var InstanceMetadataEndpointState;
(function (InstanceMetadataEndpointState) {
    InstanceMetadataEndpointState["Disabled"] = "disabled";
    InstanceMetadataEndpointState["Enabled"] = "enabled";
})(InstanceMetadataEndpointState || (InstanceMetadataEndpointState = {}));
export var InstanceMetadataHttpTokensState;
(function (InstanceMetadataHttpTokensState) {
    InstanceMetadataHttpTokensState["Optional"] = "optional";
    InstanceMetadataHttpTokensState["Required"] = "required";
})(InstanceMetadataHttpTokensState || (InstanceMetadataHttpTokensState = {}));
export class ResourceInUseFault extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceInUseFault",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceInUseFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseFault.prototype);
    }
}
export class ScalingActivityInProgressFault extends __BaseException {
    constructor(opts) {
        super({
            name: "ScalingActivityInProgressFault",
            $fault: "client",
            ...opts,
        });
        this.name = "ScalingActivityInProgressFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ScalingActivityInProgressFault.prototype);
    }
}
export var LifecycleState;
(function (LifecycleState) {
    LifecycleState["DETACHED"] = "Detached";
    LifecycleState["DETACHING"] = "Detaching";
    LifecycleState["ENTERING_STANDBY"] = "EnteringStandby";
    LifecycleState["IN_SERVICE"] = "InService";
    LifecycleState["PENDING"] = "Pending";
    LifecycleState["PENDING_PROCEED"] = "Pending:Proceed";
    LifecycleState["PENDING_WAIT"] = "Pending:Wait";
    LifecycleState["QUARANTINED"] = "Quarantined";
    LifecycleState["STANDBY"] = "Standby";
    LifecycleState["TERMINATED"] = "Terminated";
    LifecycleState["TERMINATING"] = "Terminating";
    LifecycleState["TERMINATING_PROCEED"] = "Terminating:Proceed";
    LifecycleState["TERMINATING_WAIT"] = "Terminating:Wait";
    LifecycleState["WARMED_HIBERNATED"] = "Warmed:Hibernated";
    LifecycleState["WARMED_PENDING"] = "Warmed:Pending";
    LifecycleState["WARMED_PENDING_PROCEED"] = "Warmed:Pending:Proceed";
    LifecycleState["WARMED_PENDING_WAIT"] = "Warmed:Pending:Wait";
    LifecycleState["WARMED_RUNNING"] = "Warmed:Running";
    LifecycleState["WARMED_STOPPED"] = "Warmed:Stopped";
    LifecycleState["WARMED_TERMINATED"] = "Warmed:Terminated";
    LifecycleState["WARMED_TERMINATING"] = "Warmed:Terminating";
    LifecycleState["WARMED_TERMINATING_PROCEED"] = "Warmed:Terminating:Proceed";
    LifecycleState["WARMED_TERMINATING_WAIT"] = "Warmed:Terminating:Wait";
})(LifecycleState || (LifecycleState = {}));
export var WarmPoolState;
(function (WarmPoolState) {
    WarmPoolState["Hibernated"] = "Hibernated";
    WarmPoolState["Running"] = "Running";
    WarmPoolState["Stopped"] = "Stopped";
})(WarmPoolState || (WarmPoolState = {}));
export var WarmPoolStatus;
(function (WarmPoolStatus) {
    WarmPoolStatus["PendingDelete"] = "PendingDelete";
})(WarmPoolStatus || (WarmPoolStatus = {}));
export class InvalidNextToken extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidNextToken",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidNextToken";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextToken.prototype);
    }
}
export var InstanceRefreshStatus;
(function (InstanceRefreshStatus) {
    InstanceRefreshStatus["Cancelled"] = "Cancelled";
    InstanceRefreshStatus["Cancelling"] = "Cancelling";
    InstanceRefreshStatus["Failed"] = "Failed";
    InstanceRefreshStatus["InProgress"] = "InProgress";
    InstanceRefreshStatus["Pending"] = "Pending";
    InstanceRefreshStatus["Successful"] = "Successful";
})(InstanceRefreshStatus || (InstanceRefreshStatus = {}));
export var PredictiveScalingMaxCapacityBreachBehavior;
(function (PredictiveScalingMaxCapacityBreachBehavior) {
    PredictiveScalingMaxCapacityBreachBehavior["HonorMaxCapacity"] = "HonorMaxCapacity";
    PredictiveScalingMaxCapacityBreachBehavior["IncreaseMaxCapacity"] = "IncreaseMaxCapacity";
})(PredictiveScalingMaxCapacityBreachBehavior || (PredictiveScalingMaxCapacityBreachBehavior = {}));
export var PredefinedLoadMetricType;
(function (PredefinedLoadMetricType) {
    PredefinedLoadMetricType["ALBTargetGroupRequestCount"] = "ALBTargetGroupRequestCount";
    PredefinedLoadMetricType["ASGTotalCPUUtilization"] = "ASGTotalCPUUtilization";
    PredefinedLoadMetricType["ASGTotalNetworkIn"] = "ASGTotalNetworkIn";
    PredefinedLoadMetricType["ASGTotalNetworkOut"] = "ASGTotalNetworkOut";
})(PredefinedLoadMetricType || (PredefinedLoadMetricType = {}));
export var PredefinedMetricPairType;
(function (PredefinedMetricPairType) {
    PredefinedMetricPairType["ALBRequestCount"] = "ALBRequestCount";
    PredefinedMetricPairType["ASGCPUUtilization"] = "ASGCPUUtilization";
    PredefinedMetricPairType["ASGNetworkIn"] = "ASGNetworkIn";
    PredefinedMetricPairType["ASGNetworkOut"] = "ASGNetworkOut";
})(PredefinedMetricPairType || (PredefinedMetricPairType = {}));
export var PredefinedScalingMetricType;
(function (PredefinedScalingMetricType) {
    PredefinedScalingMetricType["ALBRequestCountPerTarget"] = "ALBRequestCountPerTarget";
    PredefinedScalingMetricType["ASGAverageCPUUtilization"] = "ASGAverageCPUUtilization";
    PredefinedScalingMetricType["ASGAverageNetworkIn"] = "ASGAverageNetworkIn";
    PredefinedScalingMetricType["ASGAverageNetworkOut"] = "ASGAverageNetworkOut";
})(PredefinedScalingMetricType || (PredefinedScalingMetricType = {}));
export var PredictiveScalingMode;
(function (PredictiveScalingMode) {
    PredictiveScalingMode["ForecastAndScale"] = "ForecastAndScale";
    PredictiveScalingMode["ForecastOnly"] = "ForecastOnly";
})(PredictiveScalingMode || (PredictiveScalingMode = {}));
export var MetricStatistic;
(function (MetricStatistic) {
    MetricStatistic["Average"] = "Average";
    MetricStatistic["Maximum"] = "Maximum";
    MetricStatistic["Minimum"] = "Minimum";
    MetricStatistic["SampleCount"] = "SampleCount";
    MetricStatistic["Sum"] = "Sum";
})(MetricStatistic || (MetricStatistic = {}));
export var MetricType;
(function (MetricType) {
    MetricType["ALBRequestCountPerTarget"] = "ALBRequestCountPerTarget";
    MetricType["ASGAverageCPUUtilization"] = "ASGAverageCPUUtilization";
    MetricType["ASGAverageNetworkIn"] = "ASGAverageNetworkIn";
    MetricType["ASGAverageNetworkOut"] = "ASGAverageNetworkOut";
})(MetricType || (MetricType = {}));
export class InstanceRefreshInProgressFault extends __BaseException {
    constructor(opts) {
        super({
            name: "InstanceRefreshInProgressFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InstanceRefreshInProgressFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InstanceRefreshInProgressFault.prototype);
    }
}
export var RefreshStrategy;
(function (RefreshStrategy) {
    RefreshStrategy["Rolling"] = "Rolling";
})(RefreshStrategy || (RefreshStrategy = {}));
export const AcceleratorCountRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const AcceleratorTotalMemoryMiBRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ActivityFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ActivitiesTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ActivityTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const AdjustmentTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const AlarmFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const AttachInstancesQueryFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const AttachLoadBalancersResultTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const AttachLoadBalancersTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const AttachLoadBalancerTargetGroupsResultTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const AttachLoadBalancerTargetGroupsTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const FailedScheduledUpdateGroupActionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchDeleteScheduledActionAnswerFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchDeleteScheduledActionTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchPutScheduledUpdateGroupActionAnswerFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ScheduledUpdateGroupActionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchPutScheduledUpdateGroupActionTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CancelInstanceRefreshAnswerFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CancelInstanceRefreshTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CompleteLifecycleActionAnswerFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CompleteLifecycleActionTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const LaunchTemplateSpecificationFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const LifecycleHookSpecificationFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const InstancesDistributionFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BaselineEbsBandwidthMbpsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const MemoryGiBPerVCpuRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const MemoryMiBRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const NetworkBandwidthGbpsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const NetworkInterfaceCountRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TotalLocalStorageGBRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const VCpuCountRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const InstanceRequirementsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const LaunchTemplateOverridesFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const LaunchTemplateFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const MixedInstancesPolicyFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TagFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateAutoScalingGroupTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const EbsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BlockDeviceMappingFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const InstanceMonitoringFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const InstanceMetadataOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateLaunchConfigurationTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateOrUpdateTagsTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DeleteAutoScalingGroupTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const LaunchConfigurationNameTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DeleteLifecycleHookAnswerFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DeleteLifecycleHookTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DeleteNotificationConfigurationTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DeletePolicyTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DeleteScheduledActionTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DeleteTagsTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DeleteWarmPoolAnswerFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DeleteWarmPoolTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeAccountLimitsAnswerFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeAdjustmentTypesAnswerFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const FilterFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const AutoScalingGroupNamesTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const EnabledMetricFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const InstanceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SuspendedProcessFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TagDescriptionFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const InstanceReusePolicyFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const WarmPoolConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const AutoScalingGroupFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const AutoScalingGroupsTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const AutoScalingInstanceDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const AutoScalingInstancesTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeAutoScalingInstancesTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeAutoScalingNotificationTypesAnswerFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DesiredConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const RefreshPreferencesFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const InstanceRefreshLivePoolProgressFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const InstanceRefreshWarmPoolProgressFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const InstanceRefreshProgressDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const InstanceRefreshFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeInstanceRefreshesAnswerFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeInstanceRefreshesTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const LaunchConfigurationNamesTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const LaunchConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const LaunchConfigurationsTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const LifecycleHookFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeLifecycleHooksAnswerFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeLifecycleHooksTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeLifecycleHookTypesAnswerFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeLoadBalancersRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const LoadBalancerStateFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeLoadBalancersResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeLoadBalancerTargetGroupsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const LoadBalancerTargetGroupStateFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeLoadBalancerTargetGroupsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const MetricGranularityTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const MetricCollectionTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeMetricCollectionTypesAnswerFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const NotificationConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeNotificationConfigurationsAnswerFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeNotificationConfigurationsTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribePoliciesTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const MetricDimensionFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const MetricFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const MetricStatFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const MetricDataQueryFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PredictiveScalingCustomizedCapacityMetricFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PredictiveScalingCustomizedLoadMetricFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PredictiveScalingCustomizedScalingMetricFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PredictiveScalingPredefinedLoadMetricFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PredictiveScalingPredefinedMetricPairFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PredictiveScalingPredefinedScalingMetricFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PredictiveScalingMetricSpecificationFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PredictiveScalingConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const StepAdjustmentFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CustomizedMetricSpecificationFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PredefinedMetricSpecificationFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TargetTrackingConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ScalingPolicyFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PoliciesTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeScalingActivitiesTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ProcessTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ProcessesTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeScheduledActionsTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ScheduledUpdateGroupActionFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ScheduledActionsTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeTagsTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TagsTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeTerminationPolicyTypesAnswerFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeWarmPoolAnswerFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeWarmPoolTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DetachInstancesAnswerFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DetachInstancesQueryFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DetachLoadBalancersResultTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DetachLoadBalancersTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DetachLoadBalancerTargetGroupsResultTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DetachLoadBalancerTargetGroupsTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DisableMetricsCollectionQueryFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const EnableMetricsCollectionQueryFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const EnterStandbyAnswerFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const EnterStandbyQueryFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ExecutePolicyTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ExitStandbyAnswerFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ExitStandbyQueryFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CapacityForecastFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const LoadForecastFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const GetPredictiveScalingForecastAnswerFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const GetPredictiveScalingForecastTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PutLifecycleHookAnswerFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PutLifecycleHookTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PutNotificationConfigurationTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PolicyARNTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PutScalingPolicyTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PutScheduledUpdateGroupActionTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PutWarmPoolAnswerFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PutWarmPoolTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const RecordLifecycleActionHeartbeatAnswerFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const RecordLifecycleActionHeartbeatTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ScalingProcessQueryFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SetDesiredCapacityTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SetInstanceHealthQueryFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SetInstanceProtectionAnswerFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SetInstanceProtectionQueryFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const StartInstanceRefreshAnswerFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const StartInstanceRefreshTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TerminateInstanceInAutoScalingGroupTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const UpdateAutoScalingGroupTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
